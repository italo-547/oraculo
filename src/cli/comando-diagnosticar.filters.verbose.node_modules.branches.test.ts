// SPDX-License-Identifier: MIT
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { Command } from 'commander';

// Cobre branches:
// - VERBOSE + include/exclude imprime "Filtros ativos" e nota sobre node_modules incluído
// - incluiNodeModules remove node_modules dos ignores padrão (ZELADOR/GUARDIAN)
// - __faseSegura usa log.fase quando disponível

describe('comando-diagnosticar – filtros verbose e include node_modules (branches)', () => {
  beforeEach(() => {
    vi.resetModules();
    process.env.VITEST = '1';
  });

  it('em VERBOSE imprime filtros, informa node_modules incluído e remove de ignores; usa log.fase', async () => {
    const info = vi.fn();
    const fase = vi.fn();
    const logMock = { info, sucesso: vi.fn(), aviso: vi.fn(), erro: vi.fn(), fase } as any;

    const cfg = {
      DEV_MODE: false,
      GUARDIAN_ENABLED: false,
      GUARDIAN_ENFORCE_PROTECTION: false,
      VERBOSE: false,
      COMPACT_MODE: false,
      REPORT_SILENCE_LOGS: false,
      SCAN_ONLY: false,
      REPORT_EXPORT_ENABLED: false,
      PARSE_ERRO_FALHA: false,
      ZELADOR_IGNORE_PATTERNS: ['node_modules/**', 'dist/**'],
      GUARDIAN_IGNORE_PATTERNS: ['node_modules/**', 'dist/**'],
    } as any;

    vi.doMock('../nucleo/constelacao/log.js', () => ({ log: logMock }));
    vi.doMock('chalk', () => ({
      default: {
        bold: (x: string) => x,
        cyan: { bold: (x: string) => x },
        yellow: { bold: (x: string) => x },
        green: { bold: (x: string) => x },
      },
    }));
    vi.doMock('../nucleo/constelacao/cosmos.js', () => ({ config: cfg }));
    vi.doMock('../nucleo/inquisidor.js', () => ({
      iniciarInquisicao: vi.fn(async () => ({ fileEntries: [] })),
      prepararComAst: vi.fn(async (fes: any) => fes),
      executarInquisicao: vi.fn(async () => ({
        ocorrencias: [],
        metricas: { analistas: [], totalArquivos: 0, tempoAnaliseMs: 0, tempoParsingMs: 0 },
      })),
      registrarUltimasMetricas: vi.fn(),
      tecnicas: [],
    }));
    vi.doMock('../guardian/sentinela.js', () => ({
      scanSystemIntegrity: vi.fn(async () => ({ status: 'ok' })),
    }));
    vi.doMock('../analistas/detector-estrutura.js', () => ({ sinaisDetectados: [] }));
    vi.doMock('../arquitetos/analista-estrutura.js', () => ({
      alinhamentoEstrutural: vi.fn(() => []),
    }));
    vi.doMock('../arquitetos/diagnostico-projeto.js', () => ({
      diagnosticarProjeto: vi.fn(() => ({})),
    }));
    vi.doMock('../relatorios/relatorio-estrutura.js', () => ({ gerarRelatorioEstrutura: vi.fn() }));
    vi.doMock('../relatorios/relatorio-zelador-saude.js', () => ({
      exibirRelatorioZeladorSaude: vi.fn(),
    }));
    vi.doMock('../relatorios/relatorio-padroes-uso.js', () => ({
      exibirRelatorioPadroesUso: vi.fn(),
    }));
    vi.doMock('../relatorios/conselheiro-oracular.js', () => ({ emitirConselhoOracular: vi.fn() }));

    const { comandoDiagnosticar } = await import('./comando-diagnosticar.js');
    const program = new Command();
    program.addCommand(comandoDiagnosticar(() => {}));
    await program.parseAsync([
      'node',
      'cli',
      'diagnosticar',
      '--verbose',
      '--include',
      'node_modules',
      '--exclude',
      'dist',
    ]);

    // Deve usar log.fase (branch do __faseSegura com fase definido)
    expect(fase).toHaveBeenCalled();

    // Deve ter impresso filtros ativos com include/exclude e nota de node_modules
    const joined = info.mock.calls.map((c) => String(c[0])).join('\n');
    expect(joined).toMatch(/Filtros ativos:/);
    expect(joined).toMatch(/include=\[/);
    expect(joined).toMatch(/exclude=\[/);
    expect(joined).toMatch(/node_modules incluído: ignorado dos padrões de exclusão/);

    // Deve ter removido node_modules dos ignores padrão
    expect(cfg.ZELADOR_IGNORE_PATTERNS.some((p: string) => /node_modules/.test(p))).toBe(false);
    expect(cfg.GUARDIAN_IGNORE_PATTERNS.some((p: string) => /node_modules/.test(p))).toBe(false);
  });
});
