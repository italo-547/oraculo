Oráculo – Sugestões e Correções para resguardar direitos autorais e compatibilidade MIT
Data: 2025-08-17
Autor: aynsken

Resumo executivo (ações imediatas – alto impacto)
1) Garantir aviso de “Proveniência e Autoria” no topo de todos os .md relevantes.
2) Auditar licenças de dependências e falhar em caso de copyleft (GPL/AGPL/LGPL).
3) Inserir cabeçalho SPDX nos arquivos-fonte principais: // SPDX-License-Identifier: MIT
4) Endurecer helpers de persistência/IO (escrita atômica, permissões restritas, validação de caminho).
5) Regenerar THIRD-PARTY-NOTICES sem caminhos locais do ambiente; manter apenas pacote@versão e licença.
6) Adicionar gates no CI (scan de .md + auditoria de licenças + testes/lint) e proteger branches.

1) Direitos autorais e proveniência
- Inserir no topo de todos os .md um aviso padrão (exemplo):
  Proveniência e Autoria: Este documento integra o projeto Oráculo (licença MIT).
  Nada aqui implica cessão de direitos morais/autorais.
  Conteúdos de terceiros não licenciados de forma compatível não devem ser incluídos.
  Referências a materiais externos devem ser linkadas e reescritas com palavras próprias.
- Evitar copiar trechos longos de fontes públicas. Sempre reescrever com palavras próprias e, se necessário, citar somente o link na descrição do PR.
- Manter uma política explícita em docs/POLICY-PROVENIENCIA.md e referenciá-la em README/docs principais.

2) Compatibilidade de licenças (dependências e textos)
- Preferir MIT/Apache-2.0/BSD. Evitar GPL/AGPL/LGPL, salvo justificativa formal e isolamento claro.
- Auditoria recomendada (opções):
  a) Se existir scripts/auditar-licencas.mjs: node scripts/auditar-licencas.mjs --fail-on-copyleft
  b) Sem script: npx license-checker --production --summary; ou npx license-checker --json > licenses.json e revisar.
- Em textos do repositório, procurar termos sensíveis:
  GPL | AGPL | LGPL | Creative Commons | CC-BY | Stack Overflow | All rights reserved | cessão de direitos | transferência de direitos | assign | cession
  Exemplos:
    git grep -nE "GPL|AGPL|LGPL|Creative Commons|CC-BY|Stack Overflow|All rights reserved|cess(ã|a)o de direitos|transfer(ê|e)ncia de direitos|assign|cession" -- "*.md" "*.ts" "*.js"

3) THIRD-PARTY-NOTICES
- Regenerar removendo quaisquer caminhos absolutos do ambiente local. Manter somente: nome do pacote, versão, licença, link da licença.
- “All rights reserved.” em notas BSD-2-Clause é normal/compatível; mantenha o texto original apenas no bloco da dependência, não no README.

4) Cabeçalhos SPDX no código
- Adicionar no topo dos arquivos .ts/.js principais:
  // SPDX-License-Identifier: MIT
- Benefícios: reforça a licença por arquivo, facilita automação de compliance.

5) Persistência e IO (endurecimento)
- Escrita atômica: escrever para arquivo temporário + fsync + rename.
- Permissões restritas: arquivos 0o600; diretórios 0o700.
- Validação de caminho: impedir path traversal; não permitir escrita fora da raiz do projeto.
- Defaults explícitos: lerEstado deve aceitar um valor padrão; não assumir arrays/vetores fixos.
- JSON estável: ordenar chaves quando pertinente para diffs reprodutíveis.
- Logging disciplinado: silenciar logs durante a construção de saídas JSON (evitar poluir stdout).

6) CI/CD (gates de proteção)
- Adicionar jobs:
  - Auditoria de licenças (fail on copyleft).
  - Varredura de Markdown (presença do aviso; termos sensíveis).
  - Lint + Testes com limiares mínimos (ex.: linhas/decl/funções 90%, ramos 88%+), bloqueando merge.
- Proteger branches (main e develop): exigir PR, checks verdes, revisão obrigatória, bloquear force-push e delete.
- Habilitar:
  - Secret scanning + push protection.
  - Dependency Review.
  - Dependabot (security e versão) se aplicável à stack.

7) Semelhança com conteúdo não-MIT (prevenção e detecção)
- Política: proibir colagem literal de trechos de código de fontes não-MIT. Reescrever do zero e documentar a referência (somente link) na descrição do PR.
- Detecção operacional (triagem rápida):
  - Buscar palavras-chave de licenças e fontes (ver item 2).
  - Revisão humana em PRs que introduzam blocos grandes de código.
  - Se necessário, usar um detector de similaridade interno em commits grandes (opcional).
- Stack Overflow: não incorporar snippets copiados; se inspiração, reescrever e adicionar testes autorais próprios.

8) Instruções do Copilot (melhorias)
- Incluir DO/DON’T explícitos:
  DO: reescrever conteúdo; citar apenas links na descrição do PR; sugerir licenças permissivas; aplicar cabeçalho SPDX.
  DON’T: colar trechos longos de documentação pública; sugerir dependências copyleft para runtime; incluir trechos de Stack Overflow.
- Solicitar sempre: alerta de licença de cada dependência sugerida, e alternativa permissiva quando houver risco.
- Exigir que o bot proponha diffs atômicos e inclua o aviso de Proveniência em novos .md.

9) Checklist e templates
- Template de PR com itens: originalidade, checagem de similaridade, licença de dependências, segurança (segredos), testes, documentação com aviso, varredura de .md anexada.
- Checklist de sincronização de docs (um único CHECKLIST fonte-de-verdade; demais arquivos referenciam).

10) Ações “corrigir agora” (marcar quando concluído)
[ ] Inserir/garantir aviso de Proveniência e Autoria nos .md principais.
[ ] Adicionar // SPDX-License-Identifier: MIT nos arquivos-fonte principais.
[ ] Rodar auditoria de licenças e remover/alternar qualquer dependência copyleft.
[ ] Regenerar THIRD-PARTY-NOTICES sem caminhos locais e com licenças claras.
[ ] Adicionar jobs no CI: auditoria de licenças, scan de .md, lint/test com limiares.
[ ] Ativar branch protection (main/develop), secret scanning e dependency review.
[ ] Registrar na documentação a política de proveniência e o checklist de PR.

11) Como validar (passo a passo)
- Varredura de .md:
  Se existir script: bash scripts/scan-markdown.sh
  Alternativa manual: git ls-files "*.md" | while read f; do head -n 30 "$f" | grep -qi "Proveni" || echo "Falta aviso: $f"; done
- Auditoria de licenças:
  Se existir script: node scripts/auditar-licencas.mjs --fail-on-copyleft
  Alternativa: npx license-checker --production --json > licenses.json (e revisar por GPL/AGPL/LGPL)
- Busca por termos sensíveis:
  git grep -nE "GPL|AGPL|LGPL|Creative Commons|CC-BY|Stack Overflow|All rights reserved|cess(ã|a)o de direitos|transfer(ê|e)ncia de direitos|assign|cession" -- "*.md" "*.ts" "*.js"
- Conferir cabeçalhos SPDX:
  git grep -n "SPDX-License-Identifier: MIT" -- "*.ts" "*.js" || echo "Adicionar SPDX nos arquivos sem cabeçalho"

Observações finais
- MIT está adequado para o projeto. O conjunto de medidas acima reduz o risco de incompatibilidades de licença e resguarda seus direitos de autoria.
