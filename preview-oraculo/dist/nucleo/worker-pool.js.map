{"version":3,"file":"worker-pool.js","sourceRoot":"","sources":["../../src/nucleo/worker-pool.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\n/**\r\n * Sistema de Pool de Workers para Processamento Paralelo de Arquivos\r\n *\r\n * Permite processar múltiplos arquivos em paralelo usando Worker Threads,\r\n * melhorando a performance em projetos grandes com muitos arquivos.\r\n */\r\n\r\nimport { Worker } from 'node:worker_threads';\r\nimport * as path from 'node:path';\r\nimport * as os from 'node:os';\r\nimport type {\r\n  FileEntryWithAst,\r\n  Tecnica,\r\n  Ocorrencia,\r\n  ContextoExecucao,\r\n  MetricaAnalista,\r\n} from '../tipos/tipos.js';\r\nimport { ocorrenciaErroAnalista } from '../tipos/tipos.js';\r\nimport { config } from './constelacao/cosmos.js';\r\nimport { log } from './constelacao/log.js';\r\n\r\nexport interface WorkerPoolOptions {\r\n  /** Número máximo de workers simultâneos (padrão: número de CPUs) */\r\n  maxWorkers?: number;\r\n  /** Tamanho do lote de arquivos por worker (padrão: 10) */\r\n  batchSize?: number;\r\n  /** Timeout por analista em ms (padrão: valor do config) */\r\n  timeoutMs?: number;\r\n  /** Se deve usar workers (padrão: true se disponível) */\r\n  enabled?: boolean;\r\n}\r\n\r\nexport interface WorkerTask {\r\n  files: FileEntryWithAst[];\r\n  techniques: Tecnica[];\r\n  context: ContextoExecucao;\r\n  workerId: number;\r\n}\r\n\r\nexport interface WorkerResult {\r\n  workerId: number;\r\n  occurrences: Ocorrencia[];\r\n  metrics: MetricaAnalista[];\r\n  processedFiles: number;\r\n  errors: string[];\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * Pool de workers para processamento paralelo de arquivos\r\n */\r\nexport class WorkerPool {\r\n  private maxWorkers: number;\r\n  private batchSize: number;\r\n  private timeoutMs: number;\r\n  private enabled: boolean;\r\n  private activeWorkers = 0;\r\n  private results: WorkerResult[] = [];\r\n  private errors: string[] = [];\r\n\r\n  constructor(options: WorkerPoolOptions = {}) {\r\n    this.maxWorkers = options.maxWorkers ?? Math.min(os.cpus().length, 8);\r\n    this.batchSize = options.batchSize ?? 10;\r\n    this.timeoutMs = options.timeoutMs ?? config.ANALISE_TIMEOUT_POR_ANALISTA_MS;\r\n    this.enabled = options.enabled ?? config.WORKER_POOL_ENABLED !== false;\r\n\r\n    // Verifica se Worker Threads estão disponíveis\r\n    if (!this.enabled || !Worker) {\r\n      this.enabled = false;\r\n      log.info('Pool de workers desabilitado (Worker Threads não disponível)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Processa arquivos usando pool de workers\r\n   */\r\n  async processFiles(\r\n    files: FileEntryWithAst[],\r\n    techniques: Tecnica[],\r\n    context: ContextoExecucao,\r\n  ): Promise<{\r\n    occurrences: Ocorrencia[];\r\n    metrics: MetricaAnalista[];\r\n    totalProcessed: number;\r\n    duration: number;\r\n  }> {\r\n    if (!this.enabled || files.length < this.batchSize) {\r\n      // Fallback para processamento sequencial\r\n      return this.processSequentially(files, techniques, context);\r\n    }\r\n\r\n    const startTime = performance.now();\r\n    const batches = this.createBatches(files);\r\n    const nonGlobalTechniques = techniques.filter((t) => !t.global);\r\n\r\n    log.info(`🚀 Iniciando processamento paralelo com ${this.maxWorkers} workers`);\r\n    log.info(`📦 ${batches.length} lotes de até ${this.batchSize} arquivos cada`);\r\n\r\n    // Processa lotes globais primeiro\r\n    const globalTechniques = techniques.filter((t) => t.global);\r\n    if (globalTechniques.length > 0) {\r\n      await this.processGlobalTechniques(globalTechniques, context);\r\n    }\r\n\r\n    // Processa lotes de arquivos em paralelo\r\n    await this.processBatches(batches, nonGlobalTechniques, context);\r\n\r\n    const duration = performance.now() - startTime;\r\n    const totalOccurrences = this.results.reduce((sum, r) => sum + r.occurrences.length, 0);\r\n    const totalMetrics = this.results.flatMap((r) => r.metrics);\r\n\r\n    log.info(`✅ Processamento paralelo concluído em ${Math.round(duration)}ms`);\r\n    log.info(\r\n      `📊 ${this.results.length} workers, ${files.length} arquivos, ${totalOccurrences} ocorrências`,\r\n    );\r\n\r\n    return {\r\n      occurrences: this.results.flatMap((r) => r.occurrences),\r\n      metrics: totalMetrics,\r\n      totalProcessed: files.length,\r\n      duration,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cria lotes de arquivos para processamento paralelo\r\n   */\r\n  private createBatches(files: FileEntryWithAst[]): FileEntryWithAst[][] {\r\n    const batches: FileEntryWithAst[][] = [];\r\n    for (let i = 0; i < files.length; i += this.batchSize) {\r\n      batches.push(files.slice(i, i + this.batchSize));\r\n    }\r\n    return batches;\r\n  }\r\n\r\n  /**\r\n   * Processa técnicas globais (não paralelizáveis)\r\n   */\r\n  private async processGlobalTechniques(\r\n    techniques: Tecnica[],\r\n    context: ContextoExecucao,\r\n  ): Promise<void> {\r\n    for (const technique of techniques) {\r\n      try {\r\n        const startTime = performance.now();\r\n        const result = await this.executeTechniqueWithTimeout(\r\n          technique,\r\n          '', // conteúdo vazio para técnicas globais\r\n          '[global]',\r\n          null, // sem AST\r\n          undefined, // sem fullPath\r\n          context,\r\n        );\r\n\r\n        if (result) {\r\n          const occurrences = Array.isArray(result) ? result : [result];\r\n          this.results.push({\r\n            workerId: -1, // ID especial para global\r\n            occurrences,\r\n            metrics: [\r\n              {\r\n                nome: technique.nome || 'global',\r\n                duracaoMs: performance.now() - startTime,\r\n                ocorrencias: occurrences.length,\r\n                global: true,\r\n              },\r\n            ],\r\n            processedFiles: 0,\r\n            errors: [],\r\n            duration: performance.now() - startTime,\r\n          });\r\n        }\r\n      } catch (error) {\r\n        const err = error as Error;\r\n        this.errors.push(`Erro em técnica global '${technique.nome}': ${err.message}`);\r\n        this.results.push({\r\n          workerId: -1,\r\n          occurrences: [\r\n            ocorrenciaErroAnalista({\r\n              mensagem: `Falha na técnica global '${technique.nome}': ${err.message}`,\r\n              relPath: '[execução global]',\r\n              origem: technique.nome,\r\n            }),\r\n          ],\r\n          metrics: [],\r\n          processedFiles: 0,\r\n          errors: [err.message],\r\n          duration: 0,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Processa lotes de arquivos em paralelo\r\n   */\r\n  private async processBatches(\r\n    batches: FileEntryWithAst[][],\r\n    techniques: Tecnica[],\r\n    context: ContextoExecucao,\r\n  ): Promise<void> {\r\n    const promises: Promise<void>[] = [];\r\n\r\n    for (let i = 0; i < batches.length; i++) {\r\n      if (this.activeWorkers >= this.maxWorkers) {\r\n        // Aguarda um worker terminar antes de iniciar outro\r\n        await Promise.race(promises);\r\n      }\r\n\r\n      const promise = this.processBatch(batches[i], techniques, context, i);\r\n      promises.push(promise);\r\n\r\n      // Remove promises concluídas\r\n      promises.filter((p) => p !== promise);\r\n    }\r\n\r\n    // Aguarda todos os workers terminarem\r\n    await Promise.all(promises);\r\n  }\r\n\r\n  /**\r\n   * Processa um lote de arquivos em um worker\r\n   */\r\n  private async processBatch(\r\n    files: FileEntryWithAst[],\r\n    techniques: Tecnica[],\r\n    context: ContextoExecucao,\r\n    batchId: number,\r\n  ): Promise<void> {\r\n    this.activeWorkers++;\r\n\r\n    try {\r\n      const workerPath = path.join(__dirname, 'worker-executor.js');\r\n\r\n      const worker = new Worker(workerPath, {\r\n        workerData: {\r\n          files,\r\n          techniques,\r\n          context,\r\n          workerId: batchId,\r\n          timeoutMs: this.timeoutMs,\r\n        } as WorkerTask,\r\n      });\r\n\r\n      const result = await new Promise<WorkerResult>((resolve, reject) => {\r\n        worker.on('message', resolve);\r\n        worker.on('error', reject);\r\n        worker.on('exit', (code) => {\r\n          if (code !== 0) {\r\n            reject(new Error(`Worker ${batchId} exited with code ${code}`));\r\n          }\r\n        });\r\n      });\r\n\r\n      this.results.push(result);\r\n    } catch (error) {\r\n      const err = error as Error;\r\n      this.errors.push(`Erro no worker ${batchId}: ${err.message}`);\r\n\r\n      // Adiciona resultado de erro\r\n      this.results.push({\r\n        workerId: batchId,\r\n        occurrences: [\r\n          ocorrenciaErroAnalista({\r\n            mensagem: `Falha no worker ${batchId}: ${err.message}`,\r\n            relPath: `[worker-${batchId}]`,\r\n            origem: 'worker-pool',\r\n          }),\r\n        ],\r\n        metrics: [],\r\n        processedFiles: 0,\r\n        errors: [err.message],\r\n        duration: 0,\r\n      });\r\n    } finally {\r\n      this.activeWorkers--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Processamento sequencial como fallback\r\n   */\r\n  private async processSequentially(\r\n    files: FileEntryWithAst[],\r\n    techniques: Tecnica[],\r\n    context: ContextoExecucao,\r\n  ): Promise<{\r\n    occurrences: Ocorrencia[];\r\n    metrics: MetricaAnalista[];\r\n    totalProcessed: number;\r\n    duration: number;\r\n  }> {\r\n    const startTime = performance.now();\r\n    const occurrences: Ocorrencia[] = [];\r\n    const metrics: MetricaAnalista[] = [];\r\n\r\n    log.info('🔄 Usando processamento sequencial (workers desabilitados)');\r\n\r\n    // Processa técnicas globais\r\n    const globalTechniques = techniques.filter((t) => t.global);\r\n    for (const technique of globalTechniques) {\r\n      try {\r\n        const result = await this.executeTechniqueWithTimeout(\r\n          technique,\r\n          '',\r\n          '[global]',\r\n          null,\r\n          undefined,\r\n          context,\r\n        );\r\n\r\n        if (result) {\r\n          const occs = Array.isArray(result) ? result : [result];\r\n          occurrences.push(...occs);\r\n        }\r\n      } catch (error) {\r\n        const err = error as Error;\r\n        occurrences.push(\r\n          ocorrenciaErroAnalista({\r\n            mensagem: `Falha na técnica global '${technique.nome}': ${err.message}`,\r\n            relPath: '[execução global]',\r\n            origem: technique.nome,\r\n          }),\r\n        );\r\n      }\r\n    }\r\n\r\n    // Processa arquivos sequencialmente\r\n    const nonGlobalTechniques = techniques.filter((t) => !t.global);\r\n    for (const file of files) {\r\n      for (const technique of nonGlobalTechniques) {\r\n        if (technique.test && !technique.test(file.relPath)) continue;\r\n\r\n        try {\r\n          const startTime = performance.now();\r\n          const result = await this.executeTechniqueWithTimeout(\r\n            technique,\r\n            file.content ?? '',\r\n            file.relPath,\r\n            file.ast ?? null,\r\n            file.fullPath,\r\n            context,\r\n          );\r\n\r\n          if (result) {\r\n            const occs = Array.isArray(result) ? result : [result];\r\n            occurrences.push(...occs);\r\n          }\r\n\r\n          const duration = performance.now() - startTime;\r\n          metrics.push({\r\n            nome: technique.nome || 'desconhecido',\r\n            duracaoMs: duration,\r\n            ocorrencias: Array.isArray(result) ? result.length : result ? 1 : 0,\r\n            global: false,\r\n          });\r\n        } catch (error) {\r\n          const err = error as Error;\r\n          occurrences.push(\r\n            ocorrenciaErroAnalista({\r\n              mensagem: `Falha na técnica '${technique.nome}' para ${file.relPath}: ${err.message}`,\r\n              relPath: file.relPath,\r\n              origem: technique.nome,\r\n            }),\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      occurrences,\r\n      metrics,\r\n      totalProcessed: files.length,\r\n      duration: performance.now() - startTime,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Executa uma técnica com timeout\r\n   */\r\n  private async executeTechniqueWithTimeout(\r\n    technique: Tecnica,\r\n    content: string,\r\n    relPath: string,\r\n    ast: import('@babel/traverse').NodePath<import('@babel/types').Node> | null,\r\n    fullPath: string | undefined,\r\n    context: ContextoExecucao,\r\n  ): Promise<ReturnType<Tecnica['aplicar']>> {\r\n    if (this.timeoutMs > 0) {\r\n      const timeoutPromise = new Promise<never>((_, reject) => {\r\n        setTimeout(() => {\r\n          reject(new Error(`Timeout: analista '${technique.nome}' excedeu ${this.timeoutMs}ms`));\r\n        }, this.timeoutMs);\r\n      });\r\n\r\n      const execPromise = technique.aplicar(content, relPath, ast, fullPath, context);\r\n      return await Promise.race([execPromise, timeoutPromise]);\r\n    } else {\r\n      return await technique.aplicar(content, relPath, ast, fullPath, context);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retorna estatísticas do pool\r\n   */\r\n  getStats() {\r\n    return {\r\n      maxWorkers: this.maxWorkers,\r\n      batchSize: this.batchSize,\r\n      enabled: this.enabled,\r\n      activeWorkers: this.activeWorkers,\r\n      completedWorkers: this.results.length,\r\n      totalErrors: this.errors.length,\r\n      errors: this.errors,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Função de conveniência para usar o pool de workers\r\n */\r\nexport async function processarComWorkers(\r\n  files: FileEntryWithAst[],\r\n  techniques: Tecnica[],\r\n  context: ContextoExecucao,\r\n  options?: WorkerPoolOptions,\r\n): Promise<{\r\n  occurrences: Ocorrencia[];\r\n  metrics: MetricaAnalista[];\r\n  totalProcessed: number;\r\n  duration: number;\r\n}> {\r\n  const pool = new WorkerPool(options);\r\n  return await pool.processFiles(files, techniques, context);\r\n}\r\n"]}