{"version":3,"file":"log.js","sourceRoot":"","sources":["../../../src/nucleo/constelacao/log.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport chalk, { type StyleFn } from './chalk-safe.js';\r\nimport tty from 'node:tty';\r\nimport { config } from './cosmos.js';\r\n\r\n// Exportamos símbolos/emojis em um único objeto para reutilização centralizada.\r\n// Caso o terminal não suporte unicode adequadamente (win legados ou CI sem fontes),\r\n// podemos degradar para alternativas ASCII leves.\r\nconst UNICODE_OK = process.env.ORACULO_NO_UNICODE !== '1';\r\n\r\nexport const LOG_SIMBOLOS = {\r\n  // Ícone de info evitamos emoji para não quebrar em editores/terminais Windows\r\n  info: 'i',\r\n  sucesso: UNICODE_OK ? '🥳' : 'ok',\r\n  erro: UNICODE_OK ? '😰' : 'x',\r\n  // Ícone de aviso também simplificado para ASCII seguro\r\n  aviso: '! ',\r\n  debug: UNICODE_OK ? '🥴' : 'dbg',\r\n  fase: UNICODE_OK ? '🔶' : '::',\r\n  passo: UNICODE_OK ? '▫️' : ' -',\r\n  scan: UNICODE_OK ? '🔍' : 'scan',\r\n  guardian: UNICODE_OK ? '🛡️' : 'guard',\r\n  pasta: UNICODE_OK ? '📂' : 'dir',\r\n};\r\n\r\nfunction shouldSilence(): boolean {\r\n  if (process.env.ORACULO_FORCE_SILENT_JSON === '1') return true;\r\n  return config.REPORT_SILENCE_LOGS;\r\n}\r\n\r\nfunction shouldSuppressParcial(msg?: string): boolean {\r\n  try {\r\n    // Permite override rápido via variável de ambiente curta ORACULO_SUPPRESS_PARCIAL=1\r\n    if (!config.SUPPRESS_PARCIAL_LOGS && process.env.ORACULO_SUPPRESS_PARCIAL !== '1') return false;\r\n    if (!msg || typeof msg !== 'string') return false;\r\n    // Suprime quando substring 'parcial' (case-insensitive) aparece em qualquer lugar.\r\n    // Isso cobre 'parcial' e variações como 'parcialmente'.\r\n    return /parcial/i.test(msg);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction isDebugMode(): boolean {\r\n  return config.DEV_MODE || process.env.ORACULO_DEBUG === 'true';\r\n}\r\n\r\nfunction getTimestamp(): string {\r\n  const now = new Date().toLocaleTimeString('pt-BR', {\r\n    hour12: false,\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit',\r\n  });\r\n  return `[${now}]`;\r\n}\r\n\r\ntype Nivel = 'info' | 'sucesso' | 'erro' | 'aviso' | 'debug';\r\n\r\ninterface FormatOptions {\r\n  nivel: Nivel;\r\n  mensagem: string;\r\n  // quando true (padrão), remove símbolos/emojis iniciais redundantes na mensagem\r\n  sanitize?: boolean;\r\n}\r\n\r\nfunction stripLeadingSimbolos(msg: string): string {\r\n  if (!msg) return msg;\r\n  const ansiRegex = /[\\u001B\\u009B][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;\r\n  // Remove ANSI para avaliar início; manteremos saída sem estilos\r\n  let plain = msg.replace(ansiRegex, '');\r\n  // Normaliza quebras e espaços iniciais\r\n  plain = plain.replace(/^\\s+/, '');\r\n  // candidatos: símbolos do mapa + extras frequentes usados em mensagens\r\n  const extras = [\r\n    '⚠️',\r\n    '✨',\r\n    '✅',\r\n    '❌',\r\n    '🔒',\r\n    '🛡️',\r\n    '🔍',\r\n    '🔎',\r\n    '📄',\r\n    '📂',\r\n    '🏗️',\r\n    '🧼',\r\n    '📊',\r\n    'ℹ️',\r\n    '▫️',\r\n    '🔶',\r\n    '🥸',\r\n    '🥳',\r\n    '🥹',\r\n    '🥴',\r\n  ];\r\n  const candidatos = Array.from(new Set([...Object.values(LOG_SIMBOLOS), ...extras])).filter(\r\n    Boolean,\r\n  ) as string[];\r\n  let mudou = true;\r\n  while (mudou) {\r\n    mudou = false;\r\n    const trimmed = plain.trimStart();\r\n    for (const s of candidatos) {\r\n      if (trimmed.startsWith(s)) {\r\n        plain = trimmed.slice(s.length);\r\n        mudou = true;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  // Espaços remanescentes após remoção\r\n  return plain.trimStart();\r\n}\r\n\r\nfunction formatarLinha({ nivel, mensagem, sanitize = true }: FormatOptions): string {\r\n  const ts = getTimestamp();\r\n  const colNivelRaw = nivel.toUpperCase().padEnd(7);\r\n  // Resolver possíveis formas do 'chalk' (função ou objeto mockado com .bold)\r\n  const hasBold = (v: unknown): v is { bold: StyleFn } =>\r\n    !!v && typeof (v as { bold?: unknown }).bold === 'function';\r\n  const resolveStyle = (v: unknown): StyleFn => {\r\n    if (typeof v === 'function') return v as StyleFn;\r\n    if (hasBold(v)) return v.bold;\r\n    return (s: string) => String(s);\r\n  };\r\n\r\n  let cor: StyleFn = (s) => s;\r\n  switch (nivel) {\r\n    case 'info':\r\n      cor = resolveStyle(chalk.cyan);\r\n      break;\r\n    case 'sucesso':\r\n      cor = resolveStyle(chalk.green);\r\n      break;\r\n    case 'erro':\r\n      cor = resolveStyle(chalk.red);\r\n      break;\r\n    case 'aviso':\r\n      cor = resolveStyle(chalk.yellow);\r\n      break;\r\n    case 'debug':\r\n      cor = resolveStyle(chalk.magenta);\r\n      break;\r\n  }\r\n  const boldFn = resolveStyle(chalk.bold);\r\n  const colNivel = boldFn(colNivelRaw);\r\n  const corpo = sanitize ? stripLeadingSimbolos(mensagem) : mensagem;\r\n  // Colorimos mensagens de destaque (erro/aviso/sucesso) para reforçar visibilidade.\r\n  const corpoFmt = nivel === 'info' || nivel === 'debug' ? corpo : cor(corpo);\r\n  const grayFn: StyleFn = typeof chalk.gray === 'function' ? chalk.gray : (s) => String(s);\r\n  const linha = grayFn(ts) + ' ' + colNivel + ' ' + corpoFmt;\r\n  // Centraliza linhas soltas somente com opt-in explícito (ORACULO_CENTER=1)\r\n  if (!process.env.VITEST && process.env.ORACULO_CENTER === '1') {\r\n    try {\r\n      const cols = obterColunasTerm();\r\n      const out: tty.WriteStream | undefined =\r\n        process.stdout && typeof (process.stdout as tty.WriteStream).isTTY !== 'undefined'\r\n          ? (process.stdout as tty.WriteStream)\r\n          : undefined;\r\n      const isTty = !!out && out.isTTY !== false;\r\n      if (isTty && cols && cols > 0) {\r\n        const ANSI_REGEX =\r\n          /[\\u001B\\u009B][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;\r\n        const visLen = (s: string) => (s || '').replace(ANSI_REGEX, '').length;\r\n        const pad = Math.floor(Math.max(0, cols - visLen(linha)) / 2);\r\n        if (pad > 0) return ' '.repeat(pad) + linha;\r\n      }\r\n    } catch {\r\n      // Se centralização falhar, retorna linha normal\r\n    }\r\n  }\r\n  return linha;\r\n}\r\n\r\n/**\r\n * Formata um bloco multi-linha com indentação consistente e moldura leve.\r\n * Útil para seções (fases) ou resumos compactos.\r\n */\r\nfunction obterColunasTerm(): number | undefined {\r\n  // Tenta obter largura do terminal de forma segura\r\n  try {\r\n    const out: tty.WriteStream | undefined =\r\n      process.stdout && typeof (process.stdout as tty.WriteStream).columns !== 'undefined'\r\n        ? (process.stdout as tty.WriteStream)\r\n        : undefined;\r\n    const cols = out?.columns;\r\n    if (typeof cols === 'number' && cols > 0) return cols;\r\n  } catch {}\r\n  // Permite override explícito via env e fallback de variáveis comuns\r\n  const envOverride = Number(process.env.ORACULO_FRAME_MAX_COLS || '0');\r\n  if (Number.isFinite(envOverride) && envOverride > 0) return envOverride;\r\n  const envCols = Number(process.env.COLUMNS || process.env.TERM_COLUMNS || '0');\r\n  return Number.isFinite(envCols) && envCols > 0 ? envCols : undefined;\r\n}\r\n\r\nfunction calcularLarguraInterna(\r\n  titulo: string,\r\n  linhas: string[],\r\n  larguraMax?: number,\r\n): { width: number; maxInner: number; visLen: (s: string) => number; ANSI_REGEX: RegExp } {\r\n  const ANSI_REGEX = /[\\u001B\\u009B][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;\r\n  const visLen = (s: string) => (s || '').replace(ANSI_REGEX, '').length;\r\n  // Largura desejada pelo conteúdo, com teto padrão (100) caso não especificado\r\n  const desejada = Math.min(\r\n    100,\r\n    Math.max(visLen(titulo) + 4, ...linhas.map((l) => visLen(l) + 4), 20),\r\n  );\r\n  const preferida =\r\n    typeof larguraMax === 'number' ? Math.max(20, Math.min(larguraMax, 120)) : desejada;\r\n  // Limite superior pela largura do terminal (responsivo)\r\n  const cols = obterColunasTerm();\r\n  const tetoTela = typeof cols === 'number' && cols > 0 ? Math.max(20, Math.min(cols, 120)) : 120;\r\n  const width = Math.max(20, Math.min(preferida, tetoTela));\r\n  const barraLen = Math.max(10, width - 2);\r\n  const maxInner = barraLen - 1;\r\n  return { width, maxInner, visLen, ANSI_REGEX };\r\n}\r\n\r\nexport function formatarBloco(\r\n  titulo: string,\r\n  linhas: string[],\r\n  corTitulo: StyleFn = typeof chalk.bold === 'function' ? chalk.bold : (s: string) => String(s),\r\n  larguraMax?: number,\r\n): string {\r\n  // Utilitários conscientes de ANSI para medir/compor por largura visível\r\n  const { width, maxInner, visLen, ANSI_REGEX } = calcularLarguraInterna(\r\n    titulo,\r\n    linhas,\r\n    larguraMax,\r\n  );\r\n  const padEndVisible = (s: string, target: number) => {\r\n    const diff = target - visLen(s);\r\n    return diff > 0 ? s + ' '.repeat(diff) : s;\r\n  };\r\n  const truncateVisible = (s: string, max: number) => {\r\n    if (visLen(s) <= max) return s;\r\n    // Preserva sequências ANSI, contando apenas largura visível\r\n    let out = '';\r\n    let count = 0;\r\n    let i = 0;\r\n    while (i < s.length && count < max - 1) {\r\n      const ch = s[i];\r\n      if (ch === '\\u001B' || ch === '\\u009B') {\r\n        // Copia sequência ANSI inteira\r\n        const m = s.slice(i).match(ANSI_REGEX);\r\n        if (m && m.index === 0) {\r\n          out += m[0];\r\n          i += m[0].length;\r\n          continue;\r\n        }\r\n      }\r\n      out += ch;\r\n      i++;\r\n      count++;\r\n    }\r\n    return out + '…';\r\n  };\r\n\r\n  const barra = '─'.repeat(Math.max(10, width - 2));\r\n  const topo = '┌' + barra + '┐';\r\n  const base = '└' + barra + '┘';\r\n  const normalizar = (s: string) => truncateVisible(s, maxInner);\r\n  const corpo = linhas.map((l) => '│ ' + padEndVisible(normalizar(l), maxInner) + '│').join('\\n');\r\n  const headTxt = '│ ' + padEndVisible(normalizar(titulo), maxInner) + '│';\r\n  // Garantir que corTitulo funciona mesmo quando mockado como objeto\r\n  const corTituloFn = typeof corTitulo === 'function' ? corTitulo : (s: string) => String(s);\r\n  const gray: StyleFn = typeof chalk.gray === 'function' ? chalk.gray : (x) => String(x);\r\n  return [gray(topo), corTituloFn(headTxt), gray(corpo), gray(base)].filter(Boolean).join('\\n');\r\n}\r\n\r\n// Fallback opcional de moldura ASCII (evita mojibake em redirecionamentos no Windows)\r\nfunction deveUsarAsciiFrames(): boolean {\r\n  return process.env.ORACULO_ASCII_FRAMES === '1';\r\n}\r\n\r\nfunction converterMolduraParaAscii(bloco: string): string {\r\n  return bloco\r\n    .replaceAll('┌', '+')\r\n    .replaceAll('┐', '+')\r\n    .replaceAll('└', '+')\r\n    .replaceAll('┘', '+')\r\n    .replaceAll('─', '-')\r\n    .replaceAll('│', '|');\r\n}\r\n\r\nexport function fase(titulo: string) {\r\n  if (shouldSilence()) return;\r\n  const bold: StyleFn = typeof chalk.bold === 'function' ? chalk.bold : (s) => String(s);\r\n  const cyan: StyleFn = typeof chalk.cyan === 'function' ? chalk.cyan : (s) => String(s);\r\n  console.log(\r\n    formatarLinha({\r\n      nivel: 'info',\r\n      mensagem: bold(cyan(`${LOG_SIMBOLOS.fase} ${titulo}`)),\r\n      sanitize: false,\r\n    }),\r\n  );\r\n}\r\n\r\nexport function passo(descricao: string) {\r\n  if (shouldSilence()) return;\r\n  console.log(\r\n    formatarLinha({\r\n      nivel: 'info',\r\n      mensagem: `${LOG_SIMBOLOS.passo} ${descricao}`,\r\n      sanitize: false,\r\n    }),\r\n  );\r\n}\r\n\r\nexport const log = {\r\n  info(msg: string): void {\r\n    if (shouldSilence()) return;\r\n    if (shouldSuppressParcial(msg)) return;\r\n    console.log(formatarLinha({ nivel: 'info', mensagem: msg }));\r\n  },\r\n\r\n  // Variante de INFO que preserva estilos/cores inline (sem sanitização de símbolos),\r\n  // útil para alinhar colunas mantendo números coloridos.\r\n  infoSemSanitizar(msg: string): void {\r\n    if (shouldSilence()) return;\r\n    if (shouldSuppressParcial(msg)) return;\r\n    console.log(formatarLinha({ nivel: 'info', mensagem: msg, sanitize: false }));\r\n  },\r\n\r\n  // Mensagem INFO com corpo estilizado (negrito + azul) e sem sanitização,\r\n  // preservando cores dentro do corpo. Útil para títulos curtos e resumos.\r\n  infoDestaque(msg: string): void {\r\n    if (shouldSilence()) return;\r\n    if (shouldSuppressParcial(msg)) return;\r\n    const bold: StyleFn = typeof chalk.bold === 'function' ? chalk.bold : (s) => String(s);\r\n    const cyan: StyleFn = typeof chalk.cyan === 'function' ? chalk.cyan : (s) => String(s);\r\n    console.log(formatarLinha({ nivel: 'info', mensagem: bold(cyan(msg)), sanitize: false }));\r\n  },\r\n\r\n  sucesso(msg: string): void {\r\n    if (shouldSilence()) return;\r\n    if (shouldSuppressParcial(msg)) return;\r\n    console.log(formatarLinha({ nivel: 'sucesso', mensagem: msg }));\r\n  },\r\n\r\n  erro(msg: string): void {\r\n    console.error(formatarLinha({ nivel: 'erro', mensagem: msg }));\r\n  },\r\n\r\n  aviso(msg: string): void {\r\n    if (shouldSilence()) return;\r\n    if (shouldSuppressParcial(msg)) return;\r\n    console.log(formatarLinha({ nivel: 'aviso', mensagem: msg }));\r\n  },\r\n\r\n  debug(msg: string): void {\r\n    if (isDebugMode()) {\r\n      if (shouldSuppressParcial(msg)) return;\r\n      console.log(formatarLinha({ nivel: 'debug', mensagem: msg }));\r\n    }\r\n  },\r\n  fase,\r\n  passo,\r\n  bloco: formatarBloco,\r\n  calcularLargura(titulo: string, linhas: string[], larguraMax?: number): number {\r\n    return calcularLarguraInterna(titulo, linhas, larguraMax).width;\r\n  },\r\n  // Imprime um bloco moldurado diretamente (sem prefixo de logger) e com fallback ASCII opcional\r\n  imprimirBloco(\r\n    titulo: string,\r\n    linhas: string[],\r\n    corTitulo: StyleFn = typeof chalk.bold === 'function' ? chalk.bold : (s: string) => String(s),\r\n    larguraMax?: number,\r\n  ): void {\r\n    if (shouldSilence()) return;\r\n    // Suprime blocos que contenham a palavra 'parcial' quando configurado\r\n    if (config.SUPPRESS_PARCIAL_LOGS) {\r\n      if (shouldSuppressParcial(titulo)) return;\r\n      for (const l of linhas) if (shouldSuppressParcial(l)) return;\r\n    }\r\n    const bloco = formatarBloco(titulo, linhas, corTitulo, larguraMax);\r\n    const out = deveUsarAsciiFrames() ? converterMolduraParaAscii(bloco) : bloco;\r\n    // Centraliza o bloco somente com opt-in explícito (ORACULO_CENTER=1)\r\n    if (!process.env.VITEST && process.env.ORACULO_CENTER === '1') {\r\n      try {\r\n        const lines = out.split('\\n');\r\n        if (!lines.length) {\r\n          console.log(out);\r\n          return;\r\n        }\r\n        // mede largura visível da moldura (linha do topo)\r\n        const ANSI_REGEX =\r\n          /[\\u001B\\u009B][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;\r\n        const visibleLen = (s: string) => s.replace(ANSI_REGEX, '').length;\r\n        const frameWidth = Math.max(...lines.map((l) => visibleLen(l)));\r\n        const cols = obterColunasTerm() || 0;\r\n        const outStream: tty.WriteStream | undefined =\r\n          process.stdout && typeof (process.stdout as tty.WriteStream).isTTY !== 'undefined'\r\n            ? (process.stdout as tty.WriteStream)\r\n            : undefined;\r\n        const isTty = !!outStream && outStream.isTTY !== false;\r\n        if (isTty) {\r\n          const pad = Math.floor(Math.max(0, cols - frameWidth) / 2);\r\n          if (pad > 0) {\r\n            const pref = ' '.repeat(pad);\r\n            console.log(lines.map((l) => pref + l).join('\\n'));\r\n            return;\r\n          }\r\n        }\r\n      } catch {\r\n        // Se centralização falhar, imprime normalmente\r\n      }\r\n    }\r\n    console.log(out);\r\n  },\r\n  simbolos: LOG_SIMBOLOS,\r\n};\r\n"]}