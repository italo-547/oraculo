{"version":3,"file":"paths.js","sourceRoot":"","sources":["../../../src/nucleo/constelacao/paths.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,8EAA8E;AAE9E,MAAM,CAAC,MAAM,QAAQ,GAAG,KAAK,CAAC;AAC9B,MAAM,CAAC,MAAM,QAAQ,GAAG,QAAQ,CAAC;AAEjC,6DAA6D;AAC7D,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AAE5D,iCAAiC;AACjC,MAAM,UAAU,OAAO,CAAC,CAAS;IAC/B,OAAO,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAC9C,CAAC;AAED,+CAA+C;AAC/C,MAAM,UAAU,WAAW,CAAC,OAAe;IACzC,MAAM,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;IAC3B,qEAAqE;IACrE,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC;AAED,8EAA8E;AAC9E,MAAM,UAAU,UAAU,CAAC,OAAe;IACxC,MAAM,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;IAC3B,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAAE,OAAO,IAAI,CAAC;IACzE,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\n// Centraliza padrões e utilidades de caminhos para evitar hardcodes dispersos\r\n\r\nexport const SRC_ROOT = 'src';\r\nexport const SRC_GLOB = 'src/**';\r\n\r\n// Diretórios sempre tratados como meta (independente de SRC)\r\nexport const META_DIRS = ['.github', '.vscode', '.oraculo'];\r\n\r\n// Normaliza para separador POSIX\r\nexport function toPosix(p: string): string {\r\n  return String(p || '').replace(/\\\\+/g, '/');\r\n}\r\n\r\n// Caminho relativo (POSIX) está dentro de src?\r\nexport function isInsideSrc(relPath: string): boolean {\r\n  const r = toPosix(relPath);\r\n  // Considera qualquer segmento \"src\" em qualquer nível: (^|/)src(/|$)\r\n  return /(?:^|\\/)src(?:\\/|$)/.test(r);\r\n}\r\n\r\n// Heurística de meta: tudo fora de src é meta, além dos diretórios explícitos\r\nexport function isMetaPath(relPath: string): boolean {\r\n  const r = toPosix(relPath);\r\n  if (META_DIRS.some((d) => r === d || r.startsWith(d + '/'))) return true;\r\n  return !isInsideSrc(r);\r\n}\r\n"]}