{"version":3,"file":"format.js","sourceRoot":"","sources":["../../../src/nucleo/constelacao/format.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,8EAA8E;AAE9E,MAAM,UAAU,QAAQ,CAAC,CAA4B;IACnD,IAAI,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAAE,OAAO,GAAG,CAAC;IAC7C,IAAI,CAAC,GAAG,CAAC;QAAE,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IACtC,IAAI,CAAC,GAAG,IAAI;QAAE,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IACzC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,GAAG,EAAE;QAAE,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IACtC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC7B,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC;IACpB,OAAO,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,KAAgC;IACxD,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAAE,OAAO,MAAM,CAAC;IACrD,MAAM,IAAI,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAClC,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;AACvC,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,CAA4B;IACtD,IAAI,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAAE,OAAO,GAAG,CAAC;IAC7C,IAAI,CAAC,GAAG,IAAI;QAAE,OAAO,GAAG,CAAC,EAAE,CAAC;IAC5B,IAAI,CAAC,GAAG,OAAO;QAAE,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IACpD,OAAO,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;AACxC,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,CAAU,EAAE,CAAU;IAC/C,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI;QAAE,OAAO,GAAG,CAAC;IACvC,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,OAAO,QAAQ,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;AACvF,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,CAAU,EAAE,CAAU;IAC/C,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;QAAE,OAAO,CAAC,CAAC;IAChD,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;AAC7B,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\n/** Utilitários de formatação padronizada para métricas e valores numéricos */\r\n\r\nexport function formatMs(v: number | undefined | null): string {\r\n  if (v == null || Number.isNaN(v)) return '-';\r\n  if (v < 1) return `${v.toFixed(2)}ms`;\r\n  if (v < 1000) return `${v.toFixed(1)}ms`;\r\n  const s = v / 1000;\r\n  if (s < 60) return `${s.toFixed(2)}s`;\r\n  const m = Math.floor(s / 60);\r\n  const rest = s % 60;\r\n  return `${m}m${rest.toFixed(0)}s`;\r\n}\r\n\r\nexport function formatPct(delta: number | undefined | null): string {\r\n  if (delta == null || !isFinite(delta)) return '0.0%';\r\n  const sign = delta > 0 ? '+' : '';\r\n  return `${sign}${delta.toFixed(1)}%`;\r\n}\r\n\r\nexport function formatCount(v: number | undefined | null): string {\r\n  if (v == null || Number.isNaN(v)) return '0';\r\n  if (v < 1000) return `${v}`;\r\n  if (v < 1000000) return `${(v / 1000).toFixed(1)}k`;\r\n  return `${(v / 1000000).toFixed(2)}M`;\r\n}\r\n\r\nexport function formatDiff(a?: number, b?: number): string {\r\n  if (a == null || b == null) return '-';\r\n  return `${formatMs(a)} => ${formatMs(b)} (${formatPct(((b - a) / (a || 1)) * 100)})`;\r\n}\r\n\r\nexport function calcPctVar(a?: number, b?: number): number {\r\n  if (a == null || b == null || a === 0) return 0;\r\n  return ((b - a) / a) * 100;\r\n}\r\n"]}