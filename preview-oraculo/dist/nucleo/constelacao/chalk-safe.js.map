{"version":3,"file":"chalk-safe.js","sourceRoot":"","sources":["../../../src/nucleo/constelacao/chalk-safe.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,0EAA0E;AAC1E,aAAa;AACb,oGAAoG;AACpG,+EAA+E;AAC/E,8FAA8F;AAE9F,OAAO,YAAY,EAAE,KAAK,OAAO,MAAM,OAAO,CAAC;AA6B/C,MAAM,EAAE,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAEpC,SAAS,YAAY,CAAC,CAAU;IAC9B,IAAI,CAAC,CAAC;QAAE,OAAO,EAAE,CAAC;IAClB,MAAM,GAAG,GAAG,CAA4B,CAAC;IACzC,MAAM,IAAI,GAAG,CAAC,CAAY,EAAuC,EAAE;QACjE,MAAM,CAAC,GAAG,GAAG,CAAC,CAAW,CAAC,CAAC;QAC3B,OAAO,OAAO,CAAC,KAAK,UAAU,CAAC,CAAC,CAAE,CAA2B,CAAC,CAAC,CAAC,SAAS,CAAC;IAC5E,CAAC,CAAC;IACF,OAAO;QACL,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;QAClB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;QACpB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC;QAChB,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;QACtB,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC;QACxB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;QAClB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;QAClB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC;KACjB,CAAC;AACJ,CAAC;AAED,SAAS,aAAa,CAAC,GAAsD;IAC3E,MAAM,IAAI,GAAG;QACX,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE;QACpB,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,EAAE;QACtB,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,EAAE;QAClB,MAAM,EAAE,GAAG,CAAC,MAAM,IAAI,EAAE;QACxB,OAAO,EAAE,GAAG,CAAC,OAAO,IAAI,EAAE;QAC1B,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE;QACpB,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE;QACpB,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,EAAE;KACV,CAAC;IAEX,MAAM,eAAe,GAAG,CAAC,OAA8B,EAAW,EAAE;QAClE,MAAM,EAAE,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;QAC1D,mDAAmD;QACnD,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;QACpE,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC;IAEF,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,MAAM,GAAG,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5C,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9C,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC,CAAC,6BAA6B;IAE1F,2DAA2D;IAC3D,MAAM,IAAI,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;IAC9D,8DAA8D;IAC9D,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;IACxE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;IAC1E,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;IACtE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;IAC5E,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;IAC9E,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;IACxE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAY,CAAC;IAEtE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;AAChE,CAAC;AAED,2EAA2E;AAC3E,MAAM,eAAe,GAClB,YAAwB,IAAK,OAA4C,CAAC,OAAO,IAAI,OAAO,CAAC;AAEhG,MAAM,CAAC,MAAM,KAAK,GAAc,aAAa,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC;AAC7E,eAAe,KAAK,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\n// Wrapper para uso seguro de chalk em ESM/CJS e ambientes de bundling/SSR\r\n// Objetivos:\r\n// - Fornecer API estável com funções obrigatórias (não opcionais) para evitar 'possibly undefined'.\r\n// - Suportar encadeamento básico usado no projeto (ex.: chalk.cyan.bold(...)).\r\n// - Em ambientes sem chalk, aplicar fallback de identidade (retorna a string sem cor/estilo).\r\n\r\nimport chalkDefault, * as chalkNs from 'chalk';\r\n\r\n// Estilos suportados pelo projeto\r\ntype StyleName = 'cyan' | 'green' | 'red' | 'yellow' | 'magenta' | 'bold' | 'gray' | 'dim';\r\n\r\n// Função de estilo com encadeamento mínimo (apenas .bold após cores, conforme uso no código)\r\nexport interface StyleFn {\r\n  (s: string): string;\r\n  cyan?: StyleFn;\r\n  green?: StyleFn;\r\n  red?: StyleFn;\r\n  yellow?: StyleFn;\r\n  magenta?: StyleFn;\r\n  bold?: StyleFn;\r\n  gray?: StyleFn;\r\n  dim?: StyleFn;\r\n}\r\n\r\nexport interface ChalkLike {\r\n  cyan: StyleFn;\r\n  green: StyleFn;\r\n  red: StyleFn;\r\n  yellow: StyleFn;\r\n  magenta: StyleFn;\r\n  bold: StyleFn;\r\n  gray: StyleFn;\r\n  dim: StyleFn;\r\n}\r\n\r\nconst ID = (s: string) => String(s);\r\n\r\nfunction getSourceFns(x: unknown): Partial<Record<StyleName, (s: string) => string>> {\r\n  if (!x) return {};\r\n  const src = x as Record<string, unknown>;\r\n  const pick = (k: StyleName): ((s: string) => string) | undefined => {\r\n    const v = src[k as string];\r\n    return typeof v === 'function' ? (v as (s: string) => string) : undefined;\r\n  };\r\n  return {\r\n    cyan: pick('cyan'),\r\n    green: pick('green'),\r\n    red: pick('red'),\r\n    yellow: pick('yellow'),\r\n    magenta: pick('magenta'),\r\n    bold: pick('bold'),\r\n    gray: pick('gray'),\r\n    dim: pick('dim'),\r\n  };\r\n}\r\n\r\nfunction makeChalkLike(src: Partial<Record<StyleName, (s: string) => string>>): ChalkLike {\r\n  const base = {\r\n    cyan: src.cyan ?? ID,\r\n    green: src.green ?? ID,\r\n    red: src.red ?? ID,\r\n    yellow: src.yellow ?? ID,\r\n    magenta: src.magenta ?? ID,\r\n    bold: src.bold ?? ID,\r\n    gray: src.gray ?? ID,\r\n    dim: src.dim ?? ID,\r\n  } as const;\r\n\r\n  const attachBoldChain = (colorFn: (s: string) => string): StyleFn => {\r\n    const fn = ((s: string) => colorFn(String(s))) as StyleFn;\r\n    // suporte a encadeamento como chalk.cyan.bold(...)\r\n    fn.bold = ((s: string) => colorFn(base.bold(String(s)))) as StyleFn;\r\n    return fn;\r\n  };\r\n\r\n  const cyan = attachBoldChain(base.cyan);\r\n  const green = attachBoldChain(base.green);\r\n  const red = attachBoldChain(base.red);\r\n  const yellow = attachBoldChain(base.yellow);\r\n  const magenta = attachBoldChain(base.magenta);\r\n  const gray = attachBoldChain(base.gray);\r\n  const dim = ((s: string) => base.dim(String(s))) as StyleFn; // dim sem encadeamento usado\r\n\r\n  // bold em si (sem necessidade de cor encadeada no projeto)\r\n  const bold = ((s: string) => base.bold(String(s))) as StyleFn;\r\n  // Opcional: permitir bold.cyan(...), caso apareça futuramente\r\n  bold.cyan = ((s: string) => base.cyan(base.bold(String(s)))) as StyleFn;\r\n  bold.green = ((s: string) => base.green(base.bold(String(s)))) as StyleFn;\r\n  bold.red = ((s: string) => base.red(base.bold(String(s)))) as StyleFn;\r\n  bold.yellow = ((s: string) => base.yellow(base.bold(String(s)))) as StyleFn;\r\n  bold.magenta = ((s: string) => base.magenta(base.bold(String(s)))) as StyleFn;\r\n  bold.gray = ((s: string) => base.gray(base.bold(String(s)))) as StyleFn;\r\n  bold.dim = ((s: string) => base.dim(base.bold(String(s)))) as StyleFn;\r\n\r\n  return { cyan, green, red, yellow, magenta, bold, gray, dim };\r\n}\r\n\r\n// Preferimos a instância default; se não existir, usamos o namespace (CJS)\r\nconst resolvedUnknown: unknown =\r\n  (chalkDefault as unknown) ?? (chalkNs as unknown as { default?: unknown }).default ?? chalkNs;\r\n\r\nexport const chalk: ChalkLike = makeChalkLike(getSourceFns(resolvedUnknown));\r\nexport default chalk;\r\n"]}