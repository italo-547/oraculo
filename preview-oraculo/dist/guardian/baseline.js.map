{"version":3,"file":"baseline.js","sourceRoot":"","sources":["../../src/guardian/baseline.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,mCAAmC,CAAC;AAC5E,OAAO,IAAI,MAAM,WAAW,CAAC;AAC7B,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAQhD;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,SAAS,CAAmB,aAAa,CAAC,CAAC;QAC9D,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YAC7D,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAA+B,CAAC,CAAC,MAAM,CACpE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,CAC3D,CAAC;YACF,OAAO,MAAM,CAAC,WAAW,CAAC,OAAO,CAAqB,CAAC;QACzD,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,QAA0B;IAC7D,MAAM,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAClC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CACpE,CAAC;IACF,MAAM,YAAY,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;AAC9C,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport { salvarEstado, lerEstado } from '../zeladores/util/persistencia.js';\r\nimport path from 'node:path';\r\nimport { BASELINE_PATH } from './constantes.js';\r\n\r\n/**\r\n * Representa o estado salvo de integridade de arquivos no baseline.\r\n * Mapeia caminho relativo de arquivo para hash (string).\r\n */\r\nexport type SnapshotBaseline = Record<string, string>;\r\n\r\n/**\r\n * Lê o baseline atual do sistema de integridade.\r\n * Retorna null se o arquivo não existir ou estiver malformado.\r\n */\r\nexport async function carregarBaseline(): Promise<SnapshotBaseline | null> {\r\n  try {\r\n    const json = await lerEstado<SnapshotBaseline>(BASELINE_PATH);\r\n    if (json && typeof json === 'object' && !Array.isArray(json)) {\r\n      const entries = Object.entries(json as Record<string, unknown>).filter(\r\n        ([k, v]) => typeof k === 'string' && typeof v === 'string',\r\n      );\r\n      return Object.fromEntries(entries) as SnapshotBaseline;\r\n    }\r\n    return null;\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Salva um novo baseline de integridade em disco, sobrescrevendo qualquer estado anterior.\r\n */\r\nexport async function salvarBaseline(snapshot: SnapshotBaseline): Promise<void> {\r\n  await import('node:fs').then((fs) =>\r\n    fs.promises.mkdir(path.dirname(BASELINE_PATH), { recursive: true }),\r\n  );\r\n  await salvarEstado(BASELINE_PATH, snapshot);\r\n}\r\n"]}