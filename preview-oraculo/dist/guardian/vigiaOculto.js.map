{"version":3,"file":"vigiaOculto.js","sourceRoot":"","sources":["../../src/guardian/vigiaOculto.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,OAAO,EAAE,uBAAuB,EAAE,MAAM,WAAW,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AACpE,OAAO,EAAE,6BAA6B,EAAE,MAAM,iBAAiB,CAAC;AAChE,OAAO,EAAE,GAAG,EAAE,MAAM,4BAA4B,CAAC;AAGjD;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,QAAqB,EACrB,kBAA0B,6BAA6B,EACvD,SAAS,GAAG,IAAI;IAEhB,MAAM,SAAS,GAAG,MAAM,iBAAiB,CAAC,eAAe,CAAC,CAAC;IAC3D,MAAM,YAAY,GAAG,IAAI,GAAG,CAAiB,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACxF,MAAM,WAAW,GAAa,EAAE,CAAC;IAEjC,KAAK,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,QAAQ,EAAE,CAAC;QAC5C,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YAAE,SAAS;QACzE,MAAM,SAAS,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAiB;QACrE,MAAM,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC/C,IAAI,YAAY,IAAI,SAAS,KAAK,YAAY,EAAE,CAAC;YAC/C,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC3B,GAAG,CAAC,KAAK,CAAC,6CAA6C,WAAW,CAAC,MAAM,cAAc,CAAC,CAAC;QACzF,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;YAC9B,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC;QACzB,CAAC;QAED,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,eAAe,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;YACjD,GAAG,CAAC,OAAO,CAAC,iEAAiE,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport { gerarSnapshotDoConteudo } from './hash.js';\r\nimport { salvarRegistros, carregarRegistros } from './registros.js';\r\nimport { REGISTRO_VIGIA_CAMINHO_PADRAO } from './constantes.js';\r\nimport { log } from '@nucleo/constelacao/log.js';\r\nimport { FileEntry } from '@tipos/tipos.js';\r\n\r\n/**\r\n * Executa uma verifica√ß√£o silenciosa de integridade de arquivos com base nos registros pr√©vios.\r\n *\r\n * @param arquivos Lista de arquivos a verificar\r\n * @param caminhoRegistro Caminho opcional do arquivo de registros (JSON)\r\n * @param autoReset Se verdadeiro, atualiza os registros se altera√ß√µes forem encontradas\r\n */\r\nexport async function vigiaOculta(\r\n  arquivos: FileEntry[],\r\n  caminhoRegistro: string = REGISTRO_VIGIA_CAMINHO_PADRAO,\r\n  autoReset = true,\r\n): Promise<void> {\r\n  const registros = await carregarRegistros(caminhoRegistro);\r\n  const mapaAnterior = new Map<string, string>(registros.map((r) => [r.arquivo, r.hash]));\r\n  const corrompidos: string[] = [];\r\n\r\n  for (const { relPath, content } of arquivos) {\r\n    if (!relPath || typeof content !== 'string' || !content.trim()) continue;\r\n    const hashAtual = gerarSnapshotDoConteudo(content); // retorna string\r\n    const hashEsperado = mapaAnterior.get(relPath);\r\n    if (hashEsperado && hashAtual !== hashEsperado) {\r\n      corrompidos.push(relPath);\r\n    }\r\n  }\r\n\r\n  if (corrompidos.length > 0) {\r\n    log.aviso(`üîê [VigiaOculta] Altera√ß√µes detectadas em ${corrompidos.length} arquivo(s):`);\r\n    for (const arq of corrompidos) {\r\n      log.info(`  - ${arq}`);\r\n    }\r\n\r\n    if (autoReset) {\r\n      await salvarRegistros(arquivos, caminhoRegistro);\r\n      log.sucesso('üåÄ Registros recalibrados automaticamente pela Vigia Oculta.\\\\n');\r\n    }\r\n  }\r\n}\r\n"]}