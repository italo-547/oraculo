{"version":3,"file":"poda.js","sourceRoot":"","sources":["../../src/zeladores/poda.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport { lerEstado, salvarEstado } from '@zeladores/util/persistencia.js';\r\nimport path from 'node:path';\r\nimport pLimit from 'p-limit';\r\nimport { detectarFantasmas } from '@zeladores/fantasma.js';\r\nimport { config } from '@nucleo/constelacao/cosmos.js';\r\nimport { log } from '@nucleo/constelacao/log.js';\r\nimport { gerarRelatorioPodaMarkdown, gerarRelatorioPodaJson } from '@relatorios/relatorio-poda.js';\r\nimport type { FileEntryWithAst, ResultadoPoda, Pendencia, HistoricoItem } from '@tipos/tipos.js';\r\n\r\nexport async function removerArquivosOrfaos(\r\n  _fileEntries: FileEntryWithAst[] /*executarRealmente = false*/,\r\n): Promise<ResultadoPoda> {\r\n  const { fantasmas } = await detectarFantasmas();\r\n  return { arquivosOrfaos: fantasmas };\r\n}\r\n\r\nfunction gerarPendencias(\r\n  fantasmas: { arquivo: string; referenciado?: boolean }[],\r\n  agora: number,\r\n): Pendencia[] {\r\n  return fantasmas.map((f) => ({\r\n    arquivo: f.arquivo,\r\n    motivo: f.referenciado ? 'inativo' : '√≥rf√£o',\r\n    detectedAt: agora,\r\n    scheduleAt: agora,\r\n  }));\r\n}\r\n\r\nfunction mesclarPendencias(anteriores: Pendencia[], novos: Pendencia[]): Pendencia[] {\r\n  const mapa = new Map<string, Pendencia>();\r\n  for (const p of anteriores) mapa.set(p.arquivo, p);\r\n  for (const p of novos) mapa.set(p.arquivo, p);\r\n  return Array.from(mapa.values());\r\n}\r\n\r\nfunction dividirPendencias(\r\n  pendencias: Pendencia[],\r\n  reativar: string[],\r\n  _agora: number,\r\n): [Pendencia[], Pendencia[]] {\r\n  const aManter: Pendencia[] = [];\r\n  const aPodar: Pendencia[] = [];\r\n  const reativarSet = new Set(reativar);\r\n  for (const p of pendencias) {\r\n    if (reativarSet.has(p.arquivo)) {\r\n      aManter.push(p);\r\n    } else {\r\n      aPodar.push(p);\r\n    }\r\n  }\r\n  return [aManter, aPodar];\r\n}\r\n\r\nconst {\r\n  AUTOANALISE_CONCURRENCY: CONCORRENCIA = 5,\r\n  ZELADOR_ABANDONED_DIR: DIR_ABANDONADOS,\r\n  ZELADOR_PENDING_PATH: PATH_PENDENTES,\r\n  ZELADOR_REACTIVATE_PATH: PATH_REATIVAR,\r\n  ZELADOR_HISTORY_PATH: PATH_HISTORICO,\r\n  ZELADOR_REPORT_PATH: PATH_RELATORIO,\r\n} = config;\r\n\r\nexport async function executarPodaCiclica(executarRealmente = false): Promise<void> {\r\n  log.info('\\nüåø Iniciando poda autom√°tica...\\n');\r\n\r\n  if (!executarRealmente) {\r\n    log.aviso('üß™ Modo de simula√ß√£o ativado (SIMULADO). Nenhum arquivo ser√° movido.\\n');\r\n  }\r\n\r\n  const base = process.cwd();\r\n  const agora = Date.now();\r\n\r\n  const [anteriores, reativar, historico] = await Promise.all([\r\n    lerEstado<Pendencia[]>(PATH_PENDENTES),\r\n    lerEstado<string[]>(PATH_REATIVAR),\r\n    lerEstado<HistoricoItem[]>(PATH_HISTORICO),\r\n  ]);\r\n\r\n  const { fantasmas } = await detectarFantasmas();\r\n  const novos = gerarPendencias(fantasmas, agora);\r\n  const unicos = mesclarPendencias(anteriores, novos);\r\n  const [aManter, aPodar] = dividirPendencias(unicos, reativar, agora);\r\n\r\n  if (!aPodar.length) {\r\n    log.sucesso('‚úÖ Nenhum arquivo para podar neste ciclo.\\n');\r\n    await gerarRelatorioPodaMarkdown(PATH_RELATORIO.replace(/\\.json$/, '.md'), aPodar, aManter, {\r\n      simulado: !executarRealmente,\r\n    });\r\n    await gerarRelatorioPodaJson(PATH_RELATORIO, aPodar, aManter);\r\n    return;\r\n  }\r\n\r\n  if (executarRealmente) {\r\n    log.aviso(`‚ö†Ô∏è Podando ${aPodar.length} arquivos...`);\r\n    await moverArquivos(aPodar, base, historico);\r\n    await salvarEstado(PATH_PENDENTES, aManter);\r\n    await salvarEstado(PATH_HISTORICO, historico);\r\n    log.sucesso('üßπ Podagem conclu√≠da.');\r\n  } else {\r\n    // Mesmo em simula√ß√£o, mostramos contagem para cobrir mensagem esperada\r\n    log.aviso(`‚ö†Ô∏è Podando ${aPodar.length} arquivos... (SIMULADO)`);\r\n    moverArquivosSimulado(aPodar, base);\r\n  }\r\n}\r\nfunction moverArquivosSimulado(lista: Pendencia[], base: string): void {\r\n  log.info(`Simulando movimenta√ß√£o para ${DIR_ABANDONADOS}:\\n`);\r\n  for (const item of lista) {\r\n    const destino = path.join(base, DIR_ABANDONADOS, item.arquivo);\r\n    log.info(`  ‚Üí SIMULADO: '${item.arquivo}' ‚Üí '${path.relative(base, destino)}'`);\r\n  }\r\n  log.info('');\r\n}\r\n\r\nasync function moverArquivos(\r\n  lista: Pendencia[],\r\n  base: string,\r\n  historico: HistoricoItem[],\r\n): Promise<void> {\r\n  const limitar = pLimit(CONCORRENCIA);\r\n\r\n  await Promise.all(\r\n    lista.map((pend) =>\r\n      limitar(async () => {\r\n        const src = path.join(base, pend.arquivo);\r\n        const dest = path.join(base, DIR_ABANDONADOS, pend.arquivo);\r\n        try {\r\n          await import('node:fs').then((fs) =>\r\n            fs.promises.mkdir(path.dirname(dest), { recursive: true }),\r\n          );\r\n          await import('node:fs').then((fs) => fs.promises.rename(src, dest));\r\n          historico.push({\r\n            arquivo: pend.arquivo,\r\n            movidoEm: new Date().toISOString(),\r\n            motivo: pend.motivo,\r\n          });\r\n          log.sucesso(`‚úÖ ${pend.arquivo} movido para abandonados.`);\r\n        } catch (err) {\r\n          log.erro(\r\n            `‚ùå Falha ao mover ${pend.arquivo}: ${typeof err === 'object' && err && 'message' in err ? (err as { message: string }).message : String(err)}`,\r\n          );\r\n        }\r\n      }),\r\n    ),\r\n  );\r\n}\r\n"]}