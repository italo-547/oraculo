{"version":3,"file":"detector-arquetipos.js","sourceRoot":"","sources":["../../src/analistas/detector-arquetipos.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\n// Nota: manter ARQUETIPOS importado visível como lembrete para integração futura\r\nimport { ARQUETIPOS, normalizarCaminho } from './arquetipos-defs.js';\r\n// Referência intencional para evitar remoção/aviso de import mantido como lembrete\r\nvoid ARQUETIPOS;\r\nimport { grafoDependencias } from './detector-dependencias.js';\r\nimport {\r\n  extrairSinaisAvancados,\r\n  SinaisProjetoAvancados,\r\n} from '../arquitetos/sinais-projeto-avancados.js';\r\nimport type {\r\n  ContextoExecucao,\r\n  ResultadoDeteccaoArquetipo,\r\n  ArquetipoDeteccaoAnomalia,\r\n  SnapshotEstruturaBaseline,\r\n  ArquetipoEstruturaDef,\r\n  ArquetipoDrift,\r\n  ArquetipoPersonalizado,\r\n} from '../tipos/tipos.js';\r\nimport { salvarEstado, lerEstado } from '../zeladores/util/persistencia.js';\r\nimport { OperarioEstrutura } from '../zeladores/operario-estrutura.js';\r\nimport path from 'node:path';\r\nimport {\r\n  carregarArquetipoPersonalizado,\r\n  obterArquetipoOficial,\r\n  integrarArquetipos,\r\n} from './arquetipos-personalizados.js';\r\n\r\nconst PENALIDADE_MISSING_REQUIRED = 20;\r\nconst PESO_OPTIONAL = 5;\r\nconst PESO_REQUIRED = 10;\r\nconst PESO_DEPENDENCIA = 10;\r\nconst PESO_PATTERN = 5;\r\nconst PENALIDADE_FORBIDDEN = 20;\r\n\r\n// Constantes adaptativas baseadas no tamanho do projeto\r\nfunction calcularConstantesAdaptativas(totalArquivos: number, totalDirs: number) {\r\n  // Fator de escala baseado no tamanho do projeto\r\n  const tamanhoProjeto = Math.min(totalArquivos / 100, 5); // máximo 5x\r\n  const complexidade = Math.min(totalDirs / 20, 3); // máximo 3x\r\n\r\n  return {\r\n    // Penalidades mais brandas para projetos grandes\r\n    PENALIDADE_MISSING_REQUIRED_ADAPTADO: Math.max(\r\n      PENALIDADE_MISSING_REQUIRED * (1 - tamanhoProjeto * 0.1),\r\n      5,\r\n    ),\r\n    // Pesos maiores para projetos complexos\r\n    PESO_OPTIONAL_ADAPTADO: PESO_OPTIONAL * (1 + complexidade * 0.2),\r\n    PESO_DEPENDENCIA_ADAPTADO: PESO_DEPENDENCIA * (1 + complexidade * 0.15),\r\n    // Penalização por arquivos proibidos mais contextual\r\n    PENALIDADE_FORBIDDEN_ADAPTADO: PENALIDADE_FORBIDDEN * (1 + tamanhoProjeto * 0.05),\r\n    // Bônus por completude mais significativo em projetos grandes\r\n    BONUS_COMPLETUDE: 50 + tamanhoProjeto * 20,\r\n  };\r\n}\r\n\r\n// Função principal de pontuação e decisão de arquétipo.\r\n// Agora implementa lógica de votação: prioriza dominante, classifica como misto em caso de empate, e desconhecido se nenhum padrão relevante.\r\n// Integração futura com orquestrador pode ser feita aqui, se necessário.\r\nfunction scoreArquetipo(\r\n  def: ArquetipoEstruturaDef,\r\n  arquivos: string[],\r\n  sinaisAvancados: SinaisProjetoAvancados,\r\n): ResultadoDeteccaoArquetipo {\r\n  const norm = arquivos.map((f) => String(normalizarCaminho(f)));\r\n  // Verifica se alguma entrada do grafo contém a dependência informada\r\n  function hasDependency(dep: string): boolean {\r\n    for (const set of grafoDependencias.values()) {\r\n      if (set.has(dep)) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Calcular constantes adaptativas baseadas no projeto\r\n  const totalArquivos = arquivos.length;\r\n  const totalDirs = new Set(arquivos.map((f) => f.split('/')[0])).size;\r\n  const constantes = calcularConstantesAdaptativas(totalArquivos, totalDirs);\r\n\r\n  const required = def.requiredDirs || [];\r\n  const matchedRequired = required.filter((d) =>\r\n    norm.some((f) => f.startsWith(d + '/') || f === d),\r\n  );\r\n  const missingRequired = required.filter((d) => !matchedRequired.includes(d));\r\n  // Bônus extra: se todos os requisitos oficiais estão presentes, favorece arquétipos específicos\r\n  let bonusEspecificidade = 0;\r\n  let penalidadeGenérico = 0;\r\n  // Se todos os requisitos obrigatórios estão presentes, aplica bônus e penaliza genéricos para garantir que o específico seja priorizado\r\n  if (required.length > 0 && missingRequired.length === 0) {\r\n    const pesoBase = typeof def.pesoBase === 'number' ? def.pesoBase : 1;\r\n    bonusEspecificidade =\r\n      pesoBase > 1 ? constantes.BONUS_COMPLETUDE : constantes.BONUS_COMPLETUDE * 0.6;\r\n    // Penaliza fortemente genéricos se outro específico está completo (evita falsos positivos)\r\n    if (def.nome === 'cli-modular' || def.nome === 'fullstack' || def.nome === 'landing-page') {\r\n      penalidadeGenérico = 1000; // penalidade extrema para nunca ultrapassar específico\r\n    }\r\n  }\r\n  const optional = def.optionalDirs || [];\r\n  const matchedOptional = optional.filter((d) =>\r\n    norm.some((f) => f.startsWith(d + '/') || f === d),\r\n  );\r\n  const dependencyMatches = (def.dependencyHints || []).filter((dep) => hasDependency(dep));\r\n  const filePatternMatches = (def.filePresencePatterns || []).filter((pat) =>\r\n    norm.some((f) => f.includes(pat)),\r\n  );\r\n  const forbiddenPresent = (def.forbiddenDirs || []).filter((d) =>\r\n    norm.some((f) => f.startsWith(d + '/') || f === d),\r\n  );\r\n\r\n  let score = (def.pesoBase || 1) * 10;\r\n  score += matchedRequired.length * PESO_REQUIRED;\r\n  score -= missingRequired.length * constantes.PENALIDADE_MISSING_REQUIRED_ADAPTADO;\r\n  score += matchedOptional.length * constantes.PESO_OPTIONAL_ADAPTADO;\r\n  score += dependencyMatches.length * constantes.PESO_DEPENDENCIA_ADAPTADO;\r\n  score += filePatternMatches.length * PESO_PATTERN;\r\n  score -= forbiddenPresent.length * constantes.PENALIDADE_FORBIDDEN_ADAPTADO;\r\n  score += bonusEspecificidade;\r\n  score -= penalidadeGenérico;\r\n\r\n  // Enriquecimento heurístico: ajusta score conforme sinais avançados do projeto\r\n  let explicacaoSinais = '';\r\n  if (sinaisAvancados) {\r\n    // Sistema de pontuação adaptativo baseado na maturidade do projeto\r\n    const maturidadeProjeto = Math.min(\r\n      (sinaisAvancados.funcoes + sinaisAvancados.classes + sinaisAvancados.tipos.length) / 50,\r\n      3,\r\n    );\r\n\r\n    // 1. Funções - mais peso para projetos maduros\r\n    if (sinaisAvancados.funcoes > 10) {\r\n      const bonusFuncoes = Math.min(15, sinaisAvancados.funcoes * 0.1) * maturidadeProjeto;\r\n      score += bonusFuncoes;\r\n      explicacaoSinais += `Detectado ${sinaisAvancados.funcoes} funções declaradas (+${bonusFuncoes.toFixed(1)}).\\n`;\r\n    }\r\n\r\n    // 2. Imports - contexto importa mais que quantidade\r\n    if (sinaisAvancados.imports.length > 0) {\r\n      const bonusImports = Math.min(12, sinaisAvancados.imports.length * 0.8);\r\n      score += bonusImports;\r\n      explicacaoSinais += `Imports detectados: ${sinaisAvancados.imports.slice(0, 3).join(', ')}${sinaisAvancados.imports.length > 3 ? '...' : ''} (+${bonusImports.toFixed(1)}).\\n`;\r\n    }\r\n\r\n    // 3. Variáveis - menos peso, mas ainda relevante\r\n    if (sinaisAvancados.variaveis > 10) {\r\n      const bonusVars = Math.min(8, sinaisAvancados.variaveis * 0.05);\r\n      score += bonusVars;\r\n      explicacaoSinais += `Detectado ${sinaisAvancados.variaveis} variáveis (+${bonusVars.toFixed(1)}).\\n`;\r\n    }\r\n\r\n    // 4. Tipos - forte indicador de maturidade TypeScript\r\n    if (sinaisAvancados.tipos.length > 0) {\r\n      const bonusTipos = Math.min(15, sinaisAvancados.tipos.length * 0.6) * maturidadeProjeto;\r\n      score += bonusTipos;\r\n      explicacaoSinais += `Tipos/Interfaces detectados: ${sinaisAvancados.tipos.slice(0, 2).join(', ')}${sinaisAvancados.tipos.length > 2 ? '...' : ''} (+${bonusTipos.toFixed(1)}).\\n`;\r\n    }\r\n\r\n    // 5. Classes - indica arquitetura orientada a objetos\r\n    if (sinaisAvancados.classes > 0) {\r\n      const bonusClasses = Math.min(12, sinaisAvancados.classes * 2) * maturidadeProjeto;\r\n      score += bonusClasses;\r\n      explicacaoSinais += `Detectado ${sinaisAvancados.classes} classes (+${bonusClasses.toFixed(1)}).\\n`;\r\n    }\r\n\r\n    // 6. Frameworks detectados - alto peso pois indica stack específica\r\n    if (sinaisAvancados.frameworksDetectados.length > 0) {\r\n      const bonusFrameworks = sinaisAvancados.frameworksDetectados.length * 8;\r\n      score += bonusFrameworks;\r\n      explicacaoSinais += `Frameworks detectados: ${sinaisAvancados.frameworksDetectados.join(', ')} (+${bonusFrameworks.toFixed(1)}).\\n`;\r\n    }\r\n\r\n    // 7. Dependências - indica ecossistema\r\n    if (sinaisAvancados.dependencias.length > 0) {\r\n      const bonusDeps = Math.min(10, sinaisAvancados.dependencias.length * 0.3);\r\n      score += bonusDeps;\r\n      explicacaoSinais += `Dependências detectadas: ${sinaisAvancados.dependencias.length} (+${bonusDeps.toFixed(1)}).\\n`;\r\n    }\r\n\r\n    // Scripts npm - indica automação\r\n    if (sinaisAvancados.scripts.length > 0) {\r\n      const bonusScripts = Math.min(6, sinaisAvancados.scripts.length * 0.4);\r\n      score += bonusScripts;\r\n      explicacaoSinais += `Scripts detectados: ${sinaisAvancados.scripts.length} (+${bonusScripts.toFixed(1)}).\\n`;\r\n    }\r\n\r\n    // Pastas padrão - indica estrutura organizada\r\n    if (sinaisAvancados.pastasPadrao.length > 0) {\r\n      const bonusPastas = Math.min(8, sinaisAvancados.pastasPadrao.length * 0.5);\r\n      score += bonusPastas;\r\n      explicacaoSinais += `Pastas padrão detectadas: ${sinaisAvancados.pastasPadrao.length} (+${bonusPastas.toFixed(1)}).\\n`;\r\n    }\r\n\r\n    // Arquivos padrão - indica pontos de entrada\r\n    if (sinaisAvancados.arquivosPadrao.length > 0) {\r\n      const bonusArquivos = Math.min(6, sinaisAvancados.arquivosPadrao.length * 0.8);\r\n      score += bonusArquivos;\r\n      explicacaoSinais += `Arquivos padrão detectados: ${sinaisAvancados.arquivosPadrao.length} (+${bonusArquivos.toFixed(1)}).\\n`;\r\n    }\r\n\r\n    // Arquivos de configuração - indica setup profissional\r\n    if (sinaisAvancados.arquivosConfig.length > 0) {\r\n      const bonusConfig = Math.min(5, sinaisAvancados.arquivosConfig.length * 0.6);\r\n      score += bonusConfig;\r\n      explicacaoSinais += `Arquivos de configuração detectados: ${sinaisAvancados.arquivosConfig.length} (+${bonusConfig.toFixed(1)}).\\n`;\r\n    }\r\n  }\r\n\r\n  const temControllers = matchedRequired.includes('src/controllers');\r\n  const temExpress = dependencyMatches.includes('express');\r\n  let explicacaoSimilaridade = explicacaoSinais;\r\n  if (def.nome === 'api-rest-express') {\r\n    if (temControllers && temExpress) {\r\n      score += 50;\r\n    } else if (temControllers) {\r\n      score += 25;\r\n    } else if (temExpress) {\r\n      score += 15;\r\n    }\r\n    if (norm.some((f) => /api|rest/i.test(f))) {\r\n      score += 10;\r\n    }\r\n    if (score >= 100) {\r\n      explicacaoSimilaridade = 'Estrutura segue o padrão oficial api-rest-express.';\r\n    } else if (score >= 70) {\r\n      explicacaoSimilaridade =\r\n        'Estrutura se assemelha fortemente ao padrão api-rest-express, mas há diferenças. Recomenda-se revisar nomes de diretórios, dependências e rotas.';\r\n    } else if (score >= 40) {\r\n      explicacaoSimilaridade =\r\n        'Estrutura parcialmente compatível com api-rest-express. Recomenda-se padronizar src/controllers, dependência express e rotas api/rest.';\r\n    } else {\r\n      explicacaoSimilaridade =\r\n        'Estrutura personalizada, mas o padrão mais próximo é api-rest-express. Recomenda-se seguir boas práticas para facilitar manutenção.';\r\n    }\r\n  }\r\n\r\n  let candidatoExtra: string | undefined;\r\n  if (def.nome === 'fullstack') {\r\n    const temPages = matchedRequired.includes('pages');\r\n    const temApi = matchedRequired.includes('api');\r\n    const temPrisma = matchedRequired.includes('prisma');\r\n    const temControllers = norm.some((f) => f.includes('src/controllers'));\r\n    const temExpress = hasDependency('express');\r\n    let isHibridoCompleto = temPages && temApi && temPrisma && temControllers && temExpress;\r\n    // Nota: variável mantida para futura heurística (parcial vs completo)\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    let isHibridoParcial = temPages && temApi && temPrisma && (temControllers || temExpress);\r\n    if (isHibridoCompleto) {\r\n      score += 40;\r\n      explicacaoSimilaridade =\r\n        'Estrutura híbrida: fullstack + api-rest-express. Projeto combina frontend (pages/api/prisma) e backend Express/controllers.';\r\n      candidatoExtra = 'api-rest-express';\r\n      // Garante que a explicação sempre inclua os candidatos potenciais\r\n      explicacaoSimilaridade +=\r\n        '\\nOutros candidatos potenciais detectados: fullstack, api-rest-express.';\r\n    } else if (temPages && temApi && temPrisma) {\r\n      score += 20;\r\n      explicacaoSimilaridade = 'Estrutura segue o padrão fullstack (pages/api/prisma).';\r\n      // Sempre inclui candidatos potenciais quando fullstack detectado\r\n      explicacaoSimilaridade +=\r\n        '\\nOutros candidatos potenciais detectados: fullstack, api-rest-express.';\r\n    }\r\n  }\r\n\r\n  // Reforça score/confiança do candidato extra em cenários híbridos (fullstack + api-rest-express)\r\n  if (def.nome === 'api-rest-express' && hasDependency('express')) {\r\n    if (\r\n      norm.some((f) => f.includes('pages')) &&\r\n      norm.some((f) => f.includes('prisma')) &&\r\n      norm.some((f) => f.includes('api'))\r\n    ) {\r\n      score += 40;\r\n      if (score > 100) score = 100;\r\n      explicacaoSimilaridade =\r\n        'Estrutura híbrida: api-rest-express + fullstack. Projeto combina backend Express/controllers e frontend (pages/prisma/api).';\r\n      explicacaoSimilaridade +=\r\n        '\\nOutros candidatos potenciais detectados: fullstack, api-rest-express.';\r\n    }\r\n    // Se chamado como candidatoExtra de fullstack híbrido, reforça score\r\n    else if (norm.some((f) => f.includes('pages')) && norm.some((f) => f.includes('prisma'))) {\r\n      score += 40;\r\n      if (score > 100) score = 100;\r\n      explicacaoSimilaridade =\r\n        'Estrutura híbrida: api-rest-express + fullstack. Projeto combina backend Express/controllers e frontend (pages/prisma).';\r\n      explicacaoSimilaridade +=\r\n        '\\nOutros candidatos potenciais detectados: fullstack, api-rest-express.';\r\n    }\r\n  }\r\n\r\n  if (score < 0) score = 0;\r\n  const maxPossible =\r\n    (def.pesoBase || 1) * 10 +\r\n    (def.requiredDirs?.length || 0) * PESO_REQUIRED +\r\n    (def.optionalDirs?.length || 0) * constantes.PESO_OPTIONAL_ADAPTADO +\r\n    (def.dependencyHints?.length || 0) * constantes.PESO_DEPENDENCIA_ADAPTADO +\r\n    (def.filePresencePatterns?.length || 0) * PESO_PATTERN +\r\n    constantes.BONUS_COMPLETUDE;\r\n\r\n  // Sistema de confiança mais inteligente\r\n  let confidence = maxPossible > 0 ? Math.min(100, Math.round((score / maxPossible) * 100)) : 0;\r\n\r\n  // Ajustes contextuais para confiança\r\n  if (sinaisAvancados) {\r\n    // Projetos com frameworks têm confiança maior\r\n    if (sinaisAvancados.frameworksDetectados.length > 0) {\r\n      confidence = Math.min(100, confidence + 5);\r\n    }\r\n\r\n    // Projetos com tipos TypeScript têm confiança maior\r\n    if (sinaisAvancados.tipos.length > 10) {\r\n      confidence = Math.min(100, confidence + 3);\r\n    }\r\n\r\n    // Projetos com estrutura de pastas organizada têm confiança maior\r\n    if (sinaisAvancados.pastasPadrao.length > 3) {\r\n      confidence = Math.min(100, confidence + 4);\r\n    }\r\n\r\n    // Penalizar confiança se há muitos arquivos proibidos\r\n    if (forbiddenPresent.length > 2) {\r\n      confidence = Math.max(0, confidence - 10);\r\n    }\r\n\r\n    // Penalizar confiança se muitos requisitos obrigatórios estão faltando\r\n    if (missingRequired.length > required.length * 0.5) {\r\n      confidence = Math.max(0, confidence - 15);\r\n    }\r\n  }\r\n\r\n  // Normalização final baseada no tamanho do projeto\r\n  if (totalArquivos > 500) {\r\n    // Projetos muito grandes: reduzir confiança se não há estrutura clara\r\n    if (confidence < 60) {\r\n      confidence = Math.max(0, confidence - 5);\r\n    }\r\n  } else if (totalArquivos < 20) {\r\n    // Projetos muito pequenos: aumentar confiança se há estrutura mínima\r\n    if (matchedRequired.length > 0) {\r\n      confidence = Math.min(100, confidence + 10);\r\n    }\r\n  }\r\n\r\n  const raizFiles = norm.filter((p) => typeof p === 'string' && !p.includes('/'));\r\n  const allowed = new Set([...(def.rootFilesAllowed || [])]);\r\n  let anomalias: ArquetipoDeteccaoAnomalia[] = [];\r\n  for (const rf of raizFiles) {\r\n    if (typeof rf === 'string' && rf.trim() !== '' && !allowed.has(rf)) {\r\n      anomalias.push({ path: rf, motivo: 'Arquivo na raiz não permitido para este arquétipo' });\r\n    }\r\n  }\r\n  let sugestaoPadronizacao = '';\r\n  if (def.nome === 'api-rest-express') {\r\n    if (!matchedRequired.includes('src/controllers')) {\r\n      sugestaoPadronizacao +=\r\n        'Sugestão: adicione o diretório src/controllers para seguir o padrão api-rest-express.\\n';\r\n    }\r\n    if (!dependencyMatches.includes('express')) {\r\n      sugestaoPadronizacao +=\r\n        'Sugestão: adicione express nas dependências para seguir o padrão api-rest-express.\\n';\r\n    }\r\n    if (!norm.some((f) => /api|rest/i.test(f))) {\r\n      sugestaoPadronizacao +=\r\n        'Sugestão: utilize nomes de arquivos e rotas que incluam \"api\" ou \"rest\" para reforçar o padrão.\\n';\r\n    }\r\n  }\r\n  // Retorna candidatoExtra junto ao resultado (usado só internamente)\r\n  return {\r\n    nome: def.nome,\r\n    score,\r\n    confidence,\r\n    matchedRequired,\r\n    missingRequired,\r\n    matchedOptional,\r\n    dependencyMatches,\r\n    filePatternMatches,\r\n    forbiddenPresent,\r\n    anomalias,\r\n    sugestaoPadronizacao,\r\n    explicacaoSimilaridade,\r\n    descricao: def.descricao || '',\r\n    candidatoExtra,\r\n  };\r\n}\r\n\r\n// Exposição somente para testes (não altera API pública)\r\n// Evita exportar diretamente para não vazar em produção\r\nif (process.env.VITEST) {\r\n  type TestExports = Record<string, unknown> & { scoreArquetipo: typeof scoreArquetipo };\r\n  const g = globalThis as unknown as { __ORACULO_TESTS__?: TestExports };\r\n  const prev = g.__ORACULO_TESTS__ ?? ({} as TestExports);\r\n  g.__ORACULO_TESTS__ = { ...prev, scoreArquetipo };\r\n}\r\n\r\nexport async function detectarArquetipos(\r\n  contexto: Pick<ContextoExecucao, 'arquivos' | 'baseDir'>,\r\n  baseDir: string,\r\n): Promise<{\r\n  candidatos: ResultadoDeteccaoArquetipo[];\r\n  baseline?: SnapshotEstruturaBaseline;\r\n  drift?: ArquetipoDrift;\r\n  arquetipoPersonalizado?: ArquetipoPersonalizado | null; // Para compatibilidade futura\r\n}> {\r\n  const arquivos = contexto.arquivos.map((f) => f.relPath);\r\n\r\n  // Carregar arquétipo personalizado se existir\r\n  const arquetipoPersonalizado = await carregarArquetipoPersonalizado(baseDir);\r\n  let arquetiposParaAvaliar = ARQUETIPOS;\r\n\r\n  // Se há arquétipo personalizado, integrá-lo com o oficial\r\n  if (arquetipoPersonalizado) {\r\n    const arquetipoOficial = obterArquetipoOficial(arquetipoPersonalizado);\r\n    if (arquetipoOficial) {\r\n      const arquetipoIntegrado = integrarArquetipos(arquetipoPersonalizado, arquetipoOficial);\r\n      // Substituir o oficial pelo personalizado na lista de avaliação\r\n      arquetiposParaAvaliar = ARQUETIPOS.map((arq) =>\r\n        arq.nome === arquetipoPersonalizado.arquetipoOficial ? arquetipoIntegrado : arq,\r\n      );\r\n    }\r\n  }\r\n\r\n  // Extrai sinais avançados do projeto\r\n  const sinaisAvancados = extrairSinaisAvancados(\r\n    contexto.arquivos,\r\n    await lerEstado(path.join(baseDir, 'package.json')),\r\n    undefined,\r\n    baseDir,\r\n    arquivos,\r\n  );\r\n\r\n  // Pontua todos os arquétipos disponíveis usando sinais avançados\r\n  let candidatos = arquetiposParaAvaliar.map((def) =>\r\n    scoreArquetipo(def, arquivos, sinaisAvancados),\r\n  );\r\n  // Ordena por confiança/score decrescente\r\n  candidatos.sort((a, b) => b.confidence - a.confidence || b.score - a.score);\r\n\r\n  // Decisão final: dominante, misto ou desconhecido\r\n  // Agora considera fatores contextuais e thresholds adaptativos\r\n  const scoresValidos = candidatos.filter((c) => c.confidence >= 30);\r\n\r\n  if (!scoresValidos.length) {\r\n    // Nenhum padrão relevante - verificar se é um projeto muito pequeno ou não estruturado\r\n    const temAlgumaEstrutura = arquivos.some(\r\n      (f) =>\r\n        f.includes('src/') || f.includes('lib/') || f.includes('app/') || f.includes('packages/'),\r\n    );\r\n\r\n    candidatos = [\r\n      {\r\n        nome: 'desconhecido',\r\n        score: 0,\r\n        confidence: temAlgumaEstrutura ? 10 : 0, // pequena confiança se há alguma estrutura\r\n        matchedRequired: [],\r\n        missingRequired: [],\r\n        matchedOptional: [],\r\n        dependencyMatches: [],\r\n        filePatternMatches: [],\r\n        forbiddenPresent: [],\r\n        anomalias: [],\r\n        sugestaoPadronizacao: temAlgumaEstrutura\r\n          ? 'Projeto tem alguma estrutura, mas não corresponde a arquétipos conhecidos. Considere organizar em src/, lib/ ou app/.'\r\n          : 'Projeto sem estrutura clara detectada. Considere criar uma organização básica.',\r\n        explicacaoSimilaridade: temAlgumaEstrutura\r\n          ? 'Estrutura parcial detectada, mas não suficiente para classificação.'\r\n          : 'Nenhum arquétipo identificado.',\r\n        descricao: 'Nenhum arquétipo identificado.',\r\n      },\r\n    ];\r\n  } else {\r\n    // Análise mais sofisticada para decidir entre dominante e misto\r\n    const top = scoresValidos[0];\r\n    const proximos = scoresValidos.filter(\r\n      (c) => c !== top && Math.abs(c.confidence - top.confidence) <= 15, // threshold aumentado\r\n    );\r\n\r\n    // Verificar se é realmente um caso híbrido ou apenas competição próxima\r\n    const ehHibridoReal = proximos.some(\r\n      (c) =>\r\n        // Verificar se há sobreposição significativa de características\r\n        c.matchedRequired.some((req) => top.matchedRequired.includes(req)) ||\r\n        c.dependencyMatches.some((dep) => top.dependencyMatches.includes(dep)),\r\n    );\r\n\r\n    if (proximos.length > 0 && ehHibridoReal) {\r\n      // Sistema de pontuação para casos híbridos\r\n      const scoreHibrido =\r\n        top.score * 0.7 + proximos.reduce((acc, c) => acc + (c.score * 0.3) / proximos.length, 0);\r\n      const confidenceHibrido = Math.max(top.confidence - 10, 40); // reduzir confiança mas manter mínimo\r\n\r\n      candidatos = [\r\n        {\r\n          nome: 'misto',\r\n          score: Math.round(scoreHibrido),\r\n          confidence: confidenceHibrido,\r\n          matchedRequired: [],\r\n          missingRequired: [],\r\n          matchedOptional: [],\r\n          dependencyMatches: [],\r\n          filePatternMatches: [],\r\n          forbiddenPresent: [],\r\n          anomalias: [],\r\n          sugestaoPadronizacao: '',\r\n          explicacaoSimilaridade: `Estrutura híbrida detectada: combina elementos de ${[top.nome, ...proximos.map((p) => p.nome)].join(', ')}. Recomenda-se avaliar se a separação em projetos distintos seria benéfica.`,\r\n          descricao: 'Estrutura híbrida',\r\n        },\r\n      ];\r\n    } else {\r\n      // Dominante claro\r\n      candidatos = [top];\r\n    }\r\n  }\r\n  const baselinePath = path.join(baseDir, '.oraculo', 'baseline-estrutura.json');\r\n  let baseline: SnapshotEstruturaBaseline | undefined;\r\n  const existente = await lerEstado<SnapshotEstruturaBaseline | []>(baselinePath);\r\n  if (\r\n    existente &&\r\n    !Array.isArray(existente) &&\r\n    typeof existente === 'object' &&\r\n    'arquetipo' in existente\r\n  ) {\r\n    baseline = existente as SnapshotEstruturaBaseline;\r\n  }\r\n  if (!baseline && candidatos[0]) {\r\n    baseline = {\r\n      version: 1,\r\n      timestamp: new Date().toISOString(),\r\n      arquetipo: candidatos[0].nome,\r\n      confidence: candidatos[0].confidence,\r\n      arquivosRaiz: arquivos.filter((p) => !p.includes('/')).sort(),\r\n    };\r\n    await salvarEstado(baselinePath, baseline);\r\n  }\r\n  // Prioriza baseline apenas se o candidato principal for 'desconhecido' ou confiança baixa\r\n  if (baseline && baseline.arquetipo !== 'desconhecido') {\r\n    const arquivosRaizAtuais = arquivos.filter((p) => !p.includes('/'));\r\n    const setBase = new Set(baseline.arquivosRaiz || []);\r\n    const temIntersecao = arquivosRaizAtuais.some((f) => setBase.has(f));\r\n    const candidatoTop = candidatos[0];\r\n    if (temIntersecao && (candidatoTop.nome === 'desconhecido' || candidatoTop.confidence < 50)) {\r\n      const melhorBaseline: ResultadoDeteccaoArquetipo = {\r\n        nome: baseline.arquetipo,\r\n        score: 999, // força topo da lista\r\n        confidence: baseline.confidence,\r\n        matchedRequired: [],\r\n        missingRequired: [],\r\n        matchedOptional: [],\r\n        dependencyMatches: [],\r\n        filePatternMatches: [],\r\n        forbiddenPresent: [],\r\n        anomalias: [],\r\n        sugestaoPadronizacao: '',\r\n        explicacaoSimilaridade:\r\n          'Detectado via baseline existente (.oraculo/baseline-estrutura.json).',\r\n        descricao: 'Arquétipo determinado pelo baseline',\r\n      };\r\n      candidatos = [melhorBaseline, ...candidatos.filter((c) => c.nome !== baseline.arquetipo)];\r\n    }\r\n  }\r\n  let drift: ArquetipoDrift | undefined;\r\n  if (baseline && candidatos[0]) {\r\n    const atual = candidatos[0];\r\n    const arquivosRaizAtuais = arquivos.filter((p) => !p.includes('/')).sort();\r\n    const setBase = new Set(baseline.arquivosRaiz);\r\n    const setAtual = new Set(arquivosRaizAtuais);\r\n    const novos: string[] = [];\r\n    const removidos: string[] = [];\r\n    for (const f of setAtual) if (!setBase.has(f)) novos.push(f as string);\r\n    for (const f of setBase) if (!setAtual.has(f)) removidos.push(f as string);\r\n    drift = {\r\n      alterouArquetipo: baseline.arquetipo !== atual.nome,\r\n      anterior: baseline.arquetipo,\r\n      atual: atual.nome,\r\n      deltaConfidence: atual.confidence - baseline.confidence,\r\n      arquivosRaizNovos: novos,\r\n      arquivosRaizRemovidos: removidos,\r\n    };\r\n  }\r\n  // Sugestão de plano para o candidato top\r\n  if (candidatos[0]) {\r\n    try {\r\n      // Usa plano de arquétipos se preset for diferente de 'oraculo' ou em ambiente de teste\r\n      const preset = (contexto as { preset?: string }).preset ?? 'oraculo';\r\n      const emTeste = !!process.env.VITEST;\r\n      const preferEstrategista = preset === 'oraculo' && !emTeste;\r\n      const { plano } = await OperarioEstrutura.planejar(baseDir, contexto.arquivos, {\r\n        preferEstrategista,\r\n        preset,\r\n      });\r\n      if (plano) candidatos[0].planoSugestao = plano;\r\n    } catch {\r\n      // mantém default vazio se falhar\r\n    }\r\n  }\r\n  return {\r\n    candidatos,\r\n    baseline,\r\n    drift,\r\n    arquetipoPersonalizado,\r\n  };\r\n}\r\n"]}