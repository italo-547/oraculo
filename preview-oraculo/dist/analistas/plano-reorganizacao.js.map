{"version":3,"file":"plano-reorganizacao.js","sourceRoot":"","sources":["../../src/analistas/plano-reorganizacao.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport path from 'node:path';\r\nimport { config } from '../nucleo/constelacao/cosmos.js';\r\nimport type { PlanoSugestaoEstrutura } from '../tipos/tipos.js';\r\n\r\n/**\r\n * @deprecated Fonte legada de plano estrutural.\r\n * Mantido para compatibilidade de testes. A orquestração unificada vive em\r\n * `src/zeladores/operario-estrutura.ts` (planejar/aplicar).\r\n */\r\n\r\n// Regex (zona verde) – sincronizar com docs/estruturas/README.md\r\nconst REGEX_TESTE_RAIZ = /\\.test\\.ts$/i;\r\nconst REGEX_SCRIPT = /^script-.+\\.(?:js|ts)$/i;\r\nconst REGEX_CONFIG = /^(?!tsconfig)([\\w.-]+)\\.config\\.(?:js|ts|cjs|mjs)$/i;\r\nconst REGEX_DECLARACAO_TIPOS = /\\.d\\.ts$/i;\r\nconst REGEX_README_FRAGMENT = /^README-fragment-.+\\.md$/i;\r\n\r\ninterface ArquivoMeta {\r\n  relPath: string;\r\n  size?: number;\r\n}\r\n\r\nexport function gerarPlanoReorganizacao(arquivos: ArquivoMeta[]): PlanoSugestaoEstrutura {\r\n  if (config.SCAN_ONLY || config.ANALISE_SCAN_ONLY)\r\n    return { mover: [], conflitos: [], resumo: { total: 0, zonaVerde: 0, bloqueados: 0 } };\r\n  const mover: { de: string; para: string; motivo: string }[] = [];\r\n  const conflitos: { alvo: string; motivo: string }[] = [];\r\n  // Normaliza separadores para POSIX e usa cópia local para evitar efeitos colaterais\r\n  const arquivosNorm = arquivos.map((a) => ({ ...a, relPath: a.relPath.replace(/\\\\/g, '/') }));\r\n  const relPaths = arquivosNorm.map((a) => a.relPath);\r\n  const raizFiles = arquivosNorm.filter((a) => !a.relPath.includes('/'));\r\n  const maxSize = config.ESTRUTURA_PLANO_MAX_FILE_SIZE || 256 * 1024;\r\n\r\n  const pushMove = (de: string, para: string, motivo: string, size?: number) => {\r\n    if (size && size > maxSize) return; // ignora grandes\r\n    if (relPaths.includes(para)) conflitos.push({ alvo: para, motivo: 'já existe' });\r\n    else mover.push({ de, para, motivo });\r\n  };\r\n\r\n  for (const f of raizFiles) {\r\n    const { relPath, size } = f;\r\n    if (REGEX_TESTE_RAIZ.test(relPath))\r\n      pushMove(\r\n        relPath,\r\n        path.posix.join(config.ESTRUTURA_TARGETS.TESTS_RAIZ_DIR, relPath),\r\n        `teste disperso na raiz – mover para ${config.ESTRUTURA_TARGETS.TESTS_RAIZ_DIR}/`,\r\n        size,\r\n      );\r\n    else if (REGEX_SCRIPT.test(relPath))\r\n      pushMove(\r\n        relPath,\r\n        path.posix.join(config.ESTRUTURA_TARGETS.SCRIPTS_DIR, relPath.replace(/^script-/, '')),\r\n        `script operacional – consolidar em ${config.ESTRUTURA_TARGETS.SCRIPTS_DIR}/`,\r\n        size,\r\n      );\r\n    else if (REGEX_CONFIG.test(relPath))\r\n      pushMove(\r\n        relPath,\r\n        path.posix.join(config.ESTRUTURA_TARGETS.CONFIG_DIR, relPath),\r\n        `config centralizada em ${config.ESTRUTURA_TARGETS.CONFIG_DIR}/`,\r\n        size,\r\n      );\r\n    else if (REGEX_DECLARACAO_TIPOS.test(relPath))\r\n      pushMove(\r\n        relPath,\r\n        path.posix.join(config.ESTRUTURA_TARGETS.TYPES_DIR, relPath),\r\n        `declaração de tipos – mover para ${config.ESTRUTURA_TARGETS.TYPES_DIR}/`,\r\n        size,\r\n      );\r\n    else if (REGEX_README_FRAGMENT.test(relPath))\r\n      pushMove(\r\n        relPath,\r\n        path.posix.join(config.ESTRUTURA_TARGETS.DOCS_FRAGMENTS_DIR, relPath),\r\n        `fragmento documental – organizar em ${config.ESTRUTURA_TARGETS.DOCS_FRAGMENTS_DIR}/`,\r\n        size,\r\n      );\r\n  }\r\n\r\n  const seen = new Set<string>();\r\n  const moverFiltrado = mover.filter((m) => {\r\n    const k = m.de + '->' + m.para;\r\n    if (seen.has(k)) return false;\r\n    seen.add(k);\r\n    return true;\r\n  });\r\n\r\n  return {\r\n    mover: moverFiltrado.map((m) => ({\r\n      ...m,\r\n      de: m.de.replace(/\\\\/g, '/'),\r\n      para: m.para.replace(/\\\\/g, '/'),\r\n    })),\r\n    conflitos,\r\n    resumo: {\r\n      total: moverFiltrado.length + conflitos.length,\r\n      zonaVerde: moverFiltrado.length,\r\n      bloqueados: conflitos.length,\r\n    },\r\n  };\r\n}\r\n"]}