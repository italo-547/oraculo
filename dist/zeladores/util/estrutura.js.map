{"version":3,"file":"estrutura.js","sourceRoot":"","sources":["../../../src/zeladores/util/estrutura.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport path from 'node:path';\r\nimport { lerEstado } from '@zeladores/util/persistencia.js';\r\n\r\nexport type NomeacaoEstilo = 'kebab' | 'dots' | 'camel';\r\n\r\nexport interface OpcoesEstrategista {\r\n  preset?: string; // nome do preset de estrutura\r\n  raizCodigo?: string;\r\n  criarSubpastasPorEntidade?: boolean;\r\n  estiloPreferido?: NomeacaoEstilo;\r\n  categoriasMapa?: Record<string, string>;\r\n  ignorarPastas?: string[];\r\n}\r\n\r\nexport const CATEGORIAS_DEFAULT: Required<NonNullable<OpcoesEstrategista['categoriasMapa']>> = {\r\n  controller: 'controllers',\r\n  controllers: 'controllers',\r\n  webhook: 'webhooks',\r\n  webhooks: 'webhooks',\r\n  cliente: 'clients',\r\n  client: 'clients',\r\n  service: 'services',\r\n  repository: 'repositories',\r\n  config: 'config',\r\n  test: '__tests__',\r\n  spec: '__tests__',\r\n  type: 'types',\r\n  types: 'types',\r\n  handler: 'handlers',\r\n};\r\n\r\nexport const DEFAULT_OPCOES: Required<\r\n  Pick<\r\n    OpcoesEstrategista,\r\n    'raizCodigo' | 'criarSubpastasPorEntidade' | 'categoriasMapa' | 'ignorarPastas'\r\n  >\r\n> &\r\n  Pick<OpcoesEstrategista, 'estiloPreferido'> = {\r\n  raizCodigo: 'src',\r\n  criarSubpastasPorEntidade: true,\r\n  estiloPreferido: 'kebab',\r\n  categoriasMapa: { ...CATEGORIAS_DEFAULT },\r\n  ignorarPastas: ['node_modules', '.git', 'dist', 'build', 'coverage', '.oraculo'],\r\n};\r\n\r\n// Presets de estrutura: baseiam-se nos defaults, aplicando ajustes de organização\r\nexport const PRESETS: Record<string, Partial<typeof DEFAULT_OPCOES> & { nome: string }> = {\r\n  oraculo: {\r\n    nome: 'oraculo',\r\n    // No preset \"oraculo\" não organizamos por entidade/domains\r\n    criarSubpastasPorEntidade: false,\r\n    categoriasMapa: { ...CATEGORIAS_DEFAULT },\r\n    ignorarPastas: [\r\n      ...DEFAULT_OPCOES.ignorarPastas,\r\n      'tests',\r\n      'tests/fixtures',\r\n      'src/analistas',\r\n      'src/arquitetos',\r\n      'src/relatorios',\r\n      'src/guardian',\r\n      'src/nucleo',\r\n      'src/cli',\r\n      'src/zeladores',\r\n      'src/tipos',\r\n    ],\r\n  },\r\n  'node-community': {\r\n    nome: 'node-community',\r\n    criarSubpastasPorEntidade: false,\r\n    categoriasMapa: {\r\n      ...CATEGORIAS_DEFAULT,\r\n    },\r\n  },\r\n  'ts-lib': {\r\n    nome: 'ts-lib',\r\n    criarSubpastasPorEntidade: false,\r\n    categoriasMapa: {\r\n      ...CATEGORIAS_DEFAULT,\r\n    },\r\n  },\r\n};\r\n\r\nexport interface ParseNomeResultado {\r\n  entidade: string | null;\r\n  categoria: string | null;\r\n}\r\n\r\nexport function normalizarRel(p: string): string {\r\n  return p.replace(/\\\\/g, '/');\r\n}\r\n\r\nexport function deveIgnorar(rel: string, ignorar: string[]): boolean {\r\n  const norm = normalizarRel(rel);\r\n  // Ignora se qualquer padrão ocorrer em qualquer nível do caminho (não apenas na raiz)\r\n  // Exemplos suportados:\r\n  //  - 'node_modules' casa 'node_modules/...', 'a/b/node_modules/...'\r\n  //  - 'dist' casa 'dist/...', 'x/dist/...'\r\n  //  - padrões com subpastas ('coverage/html') ainda casam por substring segmentada\r\n  return ignorar.some((raw) => {\r\n    const pat = normalizarRel(raw);\r\n    if (!pat) return false;\r\n    if (norm === pat) return true;\r\n    if (norm.startsWith(pat + '/')) return true;\r\n    if (norm.endsWith('/' + pat)) return true;\r\n    // Casa por segmento intermediário:\r\n    //  - '/pat/' ocorre no meio do caminho\r\n    //  - ou qualquer segmento exatamente igual ao pat (quando pat é um único segmento)\r\n    if (norm.includes('/' + pat + '/')) return true;\r\n    if (!pat.includes('/')) {\r\n      const segs = norm.split('/');\r\n      if (segs.includes(pat)) return true;\r\n    }\r\n    return false;\r\n  });\r\n}\r\n\r\nexport function parseNomeArquivo(baseName: string): ParseNomeResultado {\r\n  const semExt = baseName.replace(/\\.[^.]+$/i, '');\r\n  const lower = semExt.toLowerCase();\r\n\r\n  // Apenas aceite categorias reconhecidas (singular/plural) para evitar falsos positivos\r\n  const CATS = new Set(Object.keys(CATEGORIAS_DEFAULT).map((c) => c.toLowerCase()));\r\n\r\n  const dotMatch = /^(?<ent>[\\w-]+)\\.(?<cat>[\\w-]+)$/.exec(semExt);\r\n  if (dotMatch?.groups) {\r\n    const cat = dotMatch.groups.cat.toLowerCase();\r\n    if (CATS.has(cat)) return { entidade: dotMatch.groups.ent, categoria: cat };\r\n  }\r\n\r\n  const kebabMatch = /^(?<ent>[\\w-]+)-(?<cat>[\\w-]+)$/.exec(lower);\r\n  if (kebabMatch?.groups) {\r\n    const cat = kebabMatch.groups.cat.toLowerCase();\r\n    if (CATS.has(cat)) return { entidade: kebabMatch.groups.ent, categoria: cat };\r\n  }\r\n\r\n  const camelMatch =\r\n    /^(?<ent>[A-Za-z][A-Za-z0-9]*?)(?<cat>Controller|Webhook|Cliente|Client|Service|Repository)$/.exec(\r\n      semExt,\r\n    );\r\n  if (camelMatch?.groups)\r\n    return { entidade: camelMatch.groups.ent, categoria: camelMatch.groups.cat.toLowerCase() };\r\n\r\n  const tokens = [\r\n    'controller',\r\n    'controllers',\r\n    'webhook',\r\n    'webhooks',\r\n    'cliente',\r\n    'client',\r\n    'service',\r\n    'repository',\r\n  ];\r\n  for (const tk of tokens) {\r\n    if (lower.endsWith('-' + tk) || lower.endsWith('.' + tk)) {\r\n      const entidade = lower.replace(new RegExp(`[.-]${tk}$`), '');\r\n      return { entidade: entidade || null, categoria: tk };\r\n    }\r\n  }\r\n  return { entidade: null, categoria: null };\r\n}\r\n\r\nexport function destinoPara(\r\n  relPath: string,\r\n  raizCodigo: string,\r\n  criarSubpastasPorEntidade: boolean,\r\n  categoriasMapa: Record<string, string>,\r\n): { destinoDir: string | null; motivo?: string } {\r\n  const baseName = path.posix.basename(normalizarRel(relPath));\r\n  const { entidade, categoria } = parseNomeArquivo(baseName);\r\n  if (!categoria) return { destinoDir: null };\r\n\r\n  // Evita pluralização incorreta quando já termina com 's'\r\n  const normCat = categoria.toLowerCase();\r\n  const pastaFinal = categoriasMapa[normCat] || (normCat.endsWith('s') ? normCat : normCat + 's');\r\n  if (criarSubpastasPorEntidade && entidade) {\r\n    const ent = entidade\r\n      .toString()\r\n      .replace(/[^a-z0-9-]/gi, '')\r\n      .toLowerCase();\r\n    const dir = path.posix.join(raizCodigo, 'domains', ent, pastaFinal);\r\n    return { destinoDir: dir, motivo: `categoria ${categoria} organizada por entidade ${ent}` };\r\n  }\r\n  return {\r\n    destinoDir: path.posix.join(raizCodigo, pastaFinal),\r\n    motivo: `categoria ${categoria} organizada por camada`,\r\n  };\r\n}\r\n\r\nexport async function carregarConfigEstrategia(\r\n  baseDir: string,\r\n  overrides?: OpcoesEstrategista,\r\n): Promise<Required<typeof DEFAULT_OPCOES>> {\r\n  const caminho = path.join(baseDir, '.oraculo', 'estrutura.json');\r\n  const lido = await lerEstado<Record<string, unknown> | []>(caminho);\r\n  const cfgArquivo = (lido && !Array.isArray(lido) && typeof lido === 'object' ? lido : {}) as\r\n    | (Partial<typeof DEFAULT_OPCOES> & { preset?: string })\r\n    | {};\r\n\r\n  const nomePreset = (overrides?.preset ||\r\n    (cfgArquivo as { preset?: string }).preset ||\r\n    'oraculo') as string;\r\n  const preset = PRESETS[nomePreset]?.nome ? PRESETS[nomePreset] : PRESETS['oraculo'];\r\n\r\n  // Merge determinístico: DEFAULT -> PRESET -> ARQUIVO -> OVERRIDES (apenas chaves definidas)\r\n  const base = { ...DEFAULT_OPCOES } as Required<typeof DEFAULT_OPCOES>;\r\n  const aplicarParcial = (src?: Partial<typeof DEFAULT_OPCOES>) => {\r\n    if (!src) return;\r\n    if (src.raizCodigo) base.raizCodigo = src.raizCodigo as string;\r\n    if (typeof src.criarSubpastasPorEntidade === 'boolean')\r\n      base.criarSubpastasPorEntidade = src.criarSubpastasPorEntidade as boolean;\r\n    if (src.estiloPreferido) base.estiloPreferido = src.estiloPreferido as NomeacaoEstilo;\r\n    if (src.categoriasMapa)\r\n      base.categoriasMapa = { ...base.categoriasMapa, ...src.categoriasMapa } as Record<\r\n        string,\r\n        string\r\n      >;\r\n    if (src.ignorarPastas && Array.isArray(src.ignorarPastas))\r\n      base.ignorarPastas = Array.from(new Set([...base.ignorarPastas, ...src.ignorarPastas]));\r\n  };\r\n  aplicarParcial(preset as Partial<typeof DEFAULT_OPCOES>);\r\n  aplicarParcial(cfgArquivo as Partial<typeof DEFAULT_OPCOES>);\r\n  aplicarParcial(overrides as Partial<typeof DEFAULT_OPCOES>);\r\n\r\n  // Garante que categoriasMapa tenha defaults base\r\n  base.categoriasMapa = { ...CATEGORIAS_DEFAULT, ...base.categoriasMapa } as Record<string, string>;\r\n  return base;\r\n}\r\n"]}