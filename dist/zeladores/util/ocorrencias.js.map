{"version":3,"file":"ocorrencias.js","sourceRoot":"","sources":["../../../src/zeladores/util/ocorrencias.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B;;;;GAIG;AAEH;;;GAGG;AACH,MAAM,UAAU,iBAAiB,CAK9B,GAAQ;IACT,MAAM,IAAI,GAAG,IAAI,GAAG,EAAa,CAAC;IAClC,KAAK,MAAM,CAAC,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;QAC1B,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,OAAO,IAAI,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,CAAC,QAAQ,IAAI,EAAE,EAAE,CAAC;QAC9F,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACvC,CAAC;IACD,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AACnC,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,gBAAgB,CAC9B,SAA0C;IAQ1C,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,EAAE,CAAC;IACjF,MAAM,GAAG,GAAG,IAAI,GAAG,EAGhB,CAAC;IACJ,KAAK,MAAM,CAAC,IAAI,SAAS,EAAE,CAAC;QAC1B,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,cAAc,CAAC,CAAC;QACxD,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/C,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACjD,MAAM,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC;QACxD,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI;YAC7B,IAAI;YACJ,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,CAAC;YACd,SAAS,EAAE,CAAC;YACZ,MAAM,EAAE,KAAK;SACd,CAAC;QACF,KAAK,CAAC,SAAS,IAAI,GAAG,CAAC;QACvB,KAAK,CAAC,WAAW,IAAI,GAAG,CAAC;QACzB,KAAK,CAAC,SAAS,IAAI,CAAC,CAAC;QACrB,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,UAAU,CAAC;QAC1C,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACvB,CAAC;IACD,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QAC5C,OAAO,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;IACpE,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\n/**\r\n * Helpers utilitários para manipulação de ocorrências e métricas de analistas.\r\n *\r\n * Observação: centralizados conforme diretriz de helpers em src/zeladores/util/.\r\n */\r\n\r\n/**\r\n * Deduplica ocorrências preservando a primeira ocorrência encontrada.\r\n * A chave de deduplicação é composta por: relPath|linha|tipo|mensagem.\r\n */\r\nexport function dedupeOcorrencias<T extends {\r\n  relPath?: string;\r\n  linha?: number;\r\n  tipo?: string;\r\n  mensagem?: string;\r\n}>(arr: T[]): T[] {\r\n  const seen = new Map<string, T>();\r\n  for (const o of arr || []) {\r\n    const key = `${o.relPath || ''}|${String(o.linha ?? '')}|${o.tipo || ''}|${o.mensagem || ''}`;\r\n    if (!seen.has(key)) seen.set(key, o);\r\n  }\r\n  return Array.from(seen.values());\r\n}\r\n\r\n/**\r\n * Agrupa métricas de analistas por nome, somando duração e ocorrências e contando execuções.\r\n * Retorna array ordenado por ocorrências desc, depois duração desc.\r\n */\r\nexport function agruparAnalistas(\r\n  analistas?: Array<Record<string, unknown>>,\r\n): Array<{\r\n  nome: string;\r\n  duracaoMs: number;\r\n  ocorrencias: number;\r\n  execucoes: number;\r\n  global: boolean;\r\n}> {\r\n  if (!analistas || !Array.isArray(analistas) || analistas.length === 0) return [];\r\n  const map = new Map<\r\n    string,\r\n    { nome: string; duracaoMs: number; ocorrencias: number; execucoes: number; global: boolean }\r\n  >();\r\n  for (const a of analistas) {\r\n    const nome = String((a && a['nome']) || 'desconhecido');\r\n    const dur = Number((a && a['duracaoMs']) || 0);\r\n    const occ = Number((a && a['ocorrencias']) || 0);\r\n    const globalFlag = Boolean((a && a['global']) || false);\r\n    const entry = map.get(nome) || {\r\n      nome,\r\n      duracaoMs: 0,\r\n      ocorrencias: 0,\r\n      execucoes: 0,\r\n      global: false,\r\n    };\r\n    entry.duracaoMs += dur;\r\n    entry.ocorrencias += occ;\r\n    entry.execucoes += 1;\r\n    entry.global = entry.global || globalFlag;\r\n    map.set(nome, entry);\r\n  }\r\n  return Array.from(map.values()).sort((x, y) => {\r\n    return y.ocorrencias - x.ocorrencias || y.duracaoMs - x.duracaoMs;\r\n  });\r\n}\r\n"]}