{"version":3,"file":"json.js","sourceRoot":"","sources":["../../../src/zeladores/util/json.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH;;GAEG;AACH,MAAM,UAAU,cAAc,CAAC,CAAS;IACtC,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC;QACnB,MAAM,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;YAClD,GAAG,IAAI,EAAE,CAAC;QACZ,CAAC;aAAM,IAAI,EAAE,IAAI,MAAM,EAAE,CAAC;YACxB,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAClD,CAAC;aAAM,CAAC;YACN,8CAA8C;YAC9C,MAAM,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC;YACvB,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YAChC,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;YACjC,GAAG,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAClD,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAc,EAAE,QAAgB,CAAC;IACpE,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAE,CAAU,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/F,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IACnD,2EAA2E;IAC3E,qEAAqE;IACrE,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AACtC,CAAC","sourcesContent":["/**\r\n * Utilidades de JSON: escape Unicode e stringificação segura para consumidores legados.\r\n *\r\n * Regras:\r\n * - Converte qualquer caractere fora do ASCII básico em sequências \\uXXXX.\r\n * - Para caracteres fora do BMP, emite pares substitutos (dois \\uXXXX).\r\n * - Mantém caracteres ASCII intactos.\r\n */\r\n\r\n/**\r\n * Escapa caracteres não-ASCII para sequências \\uXXXX, incluindo pares substitutos.\r\n */\r\nexport function escapeNonAscii(s: string): string {\r\n  let out = '';\r\n  for (const ch of s) {\r\n    const cp = ch.codePointAt(0);\r\n    if (cp === undefined || cp === null || cp <= 0x7f) {\r\n      out += ch;\r\n    } else if (cp <= 0xffff) {\r\n      out += '\\\\u' + cp.toString(16).padStart(4, '0');\r\n    } else {\r\n      // caracteres fora do BMP -> pares substitutos\r\n      const v = cp - 0x10000;\r\n      const high = 0xd800 + (v >> 10);\r\n      const low = 0xdc00 + (v & 0x3ff);\r\n      out += '\\\\u' + high.toString(16).padStart(4, '0');\r\n      out += '\\\\u' + low.toString(16).padStart(4, '0');\r\n    }\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Stringifica um objeto em JSON aplicando escapeNonAscii em todos os strings do objeto.\r\n * Normaliza possíveis double-escapes (\"\\\\uXXXX\" -> \"\\uXXXX\").\r\n */\r\nexport function stringifyJsonEscaped(value: unknown, space: number = 2): string {\r\n  const replacer = (_key: string, v: unknown) => (typeof v === 'string' ? escapeNonAscii(v) : v);\r\n  const raw = JSON.stringify(value, replacer, space);\r\n  // JSON.stringify pode escapar as barras invertidas inseridas pelo replacer\r\n  // (\\\\u -> \\u). Normalizamos para os consumidores que esperam \\uXXXX.\r\n  return raw.replace(/\\\\\\\\u/g, '\\\\u');\r\n}\r\n"]}