{"version":3,"file":"leitor-relatorio.js","sourceRoot":"","sources":["../../../src/zeladores/util/leitor-relatorio.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\n/**\r\n * Utilitários para trabalhar com relatórios JSON versionados\r\n */\r\n\r\nimport { lerEstado } from './persistencia.js';\r\nimport { validarSchema, migrarParaVersaoAtual } from '@nucleo/schema-versao.js';\r\n\r\ntype RelatorioGenerico = Record<string, unknown>;\r\ntype RelatorioVersionado<T = unknown> = RelatorioGenerico & {\r\n  _schema?: Record<string, unknown>;\r\n  dados?: T;\r\n};\r\n\r\nexport interface LeitorRelatorioOptions {\r\n  /** Caminho do arquivo do relatório */\r\n  caminho: string;\r\n  /** Se deve validar o schema (padrão: true) */\r\n  validar?: boolean;\r\n  /** Se deve migrar para versão atual se necessário (padrão: false) */\r\n  migrar?: boolean;\r\n}\r\n\r\n/**\r\n * Lê um relatório JSON versionado do disco\r\n */\r\nexport async function lerRelatorioVersionado<T = unknown>(\r\n  options: LeitorRelatorioOptions,\r\n): Promise<{\r\n  sucesso: boolean;\r\n  dados?: T;\r\n  schema?: Record<string, unknown>;\r\n  erro?: string;\r\n  migrado?: boolean;\r\n}> {\r\n  const { caminho, validar = true, migrar = false } = options;\r\n\r\n  try {\r\n    // Ler arquivo\r\n    const conteudo = await lerEstado<Record<string, unknown>>(caminho);\r\n\r\n    if (!conteudo) {\r\n      return {\r\n        sucesso: false,\r\n        erro: 'Arquivo não encontrado ou vazio',\r\n      };\r\n    }\r\n\r\n    let relatorioFinal = conteudo;\r\n    let migrado = false;\r\n\r\n    // Validar schema se solicitado\r\n    if (validar) {\r\n      const validacao = validarSchema(conteudo);\r\n      if (!validacao.valido) {\r\n        return {\r\n          sucesso: false,\r\n          erro: `Schema inválido: ${validacao.erros.join(', ')}`,\r\n        };\r\n      }\r\n    }\r\n\r\n    // Migrar se necessário e solicitado.\r\n    // - Se migrar=true: migramos explicitamente.\r\n    // - Se migrar=false e validar=false: aceitamos o conteúdo legado como está (modo permissivo).\r\n    // - Se migrar=false e validar=true: rejeitamos (chamador pediu validação estrita).\r\n    if (!conteudo._schema || !conteudo.dados) {\r\n      if (migrar) {\r\n        relatorioFinal = migrarParaVersaoAtual<unknown>(conteudo) as unknown as Record<\r\n          string,\r\n          unknown\r\n        >;\r\n        migrado = true;\r\n      } else if (!validar) {\r\n        // modo permissivo: aceitar o conteúdo legado sem migrar\r\n        relatorioFinal = conteudo;\r\n        migrado = false;\r\n      } else {\r\n        return {\r\n          sucesso: false,\r\n          erro: 'Relatório em formato antigo (sem _schema); habilite migrar para atualizá-lo explicitamente.',\r\n        };\r\n      }\r\n    }\r\n\r\n    // Extrair dados: se for relatório versionado, retornamos apenas `dados`.\r\n    // Se for formato legado (sem _schema), retornamos o objeto inteiro.\r\n    let dados: T;\r\n    const relObj = relatorioFinal as RelatorioVersionado<T>;\r\n\r\n    if ('_schema' in relObj && relObj._schema) {\r\n      dados = relObj.dados as T;\r\n    } else {\r\n      dados = relatorioFinal as T;\r\n    }\r\n\r\n    return {\r\n      sucesso: true,\r\n      dados,\r\n      schema: (relObj._schema as Record<string, unknown>) || undefined,\r\n      migrado,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      sucesso: false,\r\n      erro: `Erro ao ler relatório: ${error instanceof Error ? error.message : String(error)}`,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Lê apenas os dados de um relatório, ignorando metadados de versão\r\n */\r\nexport async function lerDadosRelatorio<T = unknown>(\r\n  caminho: string,\r\n): Promise<{\r\n  sucesso: boolean;\r\n  dados?: T;\r\n  erro?: string;\r\n}> {\r\n  // Para obtenção superficial de dados, permitimos migração automática aqui\r\n  const resultado = await lerRelatorioVersionado<T>({ caminho, validar: false, migrar: true });\r\n\r\n  return {\r\n    sucesso: resultado.sucesso,\r\n    dados: resultado.dados,\r\n    erro: resultado.erro,\r\n  };\r\n}\r\n\r\n/**\r\n * Verifica se um relatório tem schema válido\r\n */\r\nexport async function verificarSchemaRelatorio(caminho: string): Promise<{\r\n  valido: boolean;\r\n  versao?: string;\r\n  erros?: string[];\r\n  erro?: string;\r\n}> {\r\n  try {\r\n    const conteudo = await lerEstado<Record<string, unknown>>(caminho);\r\n\r\n    if (!conteudo) {\r\n      return {\r\n        valido: false,\r\n        erros: ['Arquivo não encontrado ou vazio'],\r\n      };\r\n    }\r\n\r\n    const validacao = validarSchema(conteudo);\r\n\r\n    return {\r\n      valido: validacao.valido,\r\n      versao: (conteudo._schema as Record<string, unknown>)?.versao as string | undefined,\r\n      erros: validacao.erros,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      valido: false,\r\n      erro: `Erro ao verificar schema: ${error instanceof Error ? error.message : String(error)}`,\r\n    };\r\n  }\r\n}\r\n"]}