{"version":3,"file":"helpers-analistas.js","sourceRoot":"","sources":["../../../src/zeladores/util/helpers-analistas.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,qCAAqC;AAErC;;GAEG;AACH,MAAM,UAAU,WAAW,CAAC,QAAgC,EAAE,KAAa;IACzE,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AAC/C,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,aAAa,CAAI,KAA6B;IAC5D,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;AAC3C,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\n// Helpers utilitários para analistas\r\n\r\n/**\r\n * Incrementa um contador de ocorrências por chave.\r\n */\r\nexport function incrementar(contador: Record<string, number>, chave: string): void {\r\n  contador[chave] = (contador[chave] ?? 0) + 1;\r\n}\r\n\r\n/**\r\n * Garante que sempre retorna array vazio se valor for null/undefined.\r\n */\r\nexport function garantirArray<T>(valor: T[] | null | undefined): T[] {\r\n  return Array.isArray(valor) ? valor : [];\r\n}\r\n"]}