{"version":3,"file":"operario-estrutura.js","sourceRoot":"","sources":["../../src/zeladores/operario-estrutura.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport type { FileEntryWithAst, Ocorrencia } from '@tipos/tipos.js';\r\nimport type { PlanoSugestaoEstrutura } from '@tipos/plano-estrutura.js';\r\nimport { detectarArquetipos } from '@analistas/detector-arquetipos.js';\r\nimport { diagnosticarProjeto } from '@arquitetos/diagnostico-projeto.js';\r\nimport { gerarPlanoEstrategico } from '@arquitetos/estrategista-estrutura.js';\r\nimport { corrigirEstrutura } from '@zeladores/corretor-estrutura.js';\r\nimport { log } from '@nucleo/constelacao/log.js';\r\nimport { config } from '@nucleo/constelacao/cosmos.js';\r\nimport { isInsideSrc } from '@nucleo/constelacao/paths.js';\r\n\r\nexport interface OpcoesPlanejamento {\r\n  preferEstrategista?: boolean;\r\n  criarSubpastasPorEntidade?: boolean; // domains vs flat\r\n  preset?: string;\r\n  categoriasMapa?: Record<string, string>;\r\n}\r\n\r\nexport interface ResultadoPlanejamento {\r\n  plano?: PlanoSugestaoEstrutura;\r\n  origem: 'arquetipos' | 'estrategista' | 'nenhum';\r\n}\r\n\r\nexport const OperarioEstrutura = {\r\n  async planejar(\r\n    baseDir: string,\r\n    fileEntriesComAst: FileEntryWithAst[],\r\n    opcoes: OpcoesPlanejamento,\r\n  ): Promise<ResultadoPlanejamento> {\r\n    // 1) Tenta arquétipos, a menos que forçado estrategista.\r\n    //    Quando preset='oraculo', evitamos arquétipos em runtime normal,\r\n    //    mas permitimos em testes (VITEST) para compatibilidade das suítes.\r\n    const emTeste = !!process.env.VITEST;\r\n    const podeUsarArquetipos =\r\n      !opcoes.preferEstrategista && (opcoes.preset !== 'oraculo' || emTeste);\r\n    if (podeUsarArquetipos) {\r\n      try {\r\n        const arqs = await detectarArquetipos(\r\n          {\r\n            arquivos: fileEntriesComAst,\r\n            baseDir,\r\n            ...(opcoes.preset ? { preset: opcoes.preset } : {}),\r\n          } as { arquivos: typeof fileEntriesComAst; baseDir: string; preset?: string },\r\n          baseDir,\r\n        );\r\n        const planoArq = arqs.candidatos[0]?.planoSugestao as PlanoSugestaoEstrutura | undefined;\r\n        if (planoArq && Array.isArray(planoArq.mover)) {\r\n          return { plano: planoArq, origem: 'arquetipos' };\r\n        }\r\n      } catch (e) {\r\n        log.aviso('⚠️ Falha ao gerar plano via arquétipos.');\r\n        if (config.DEV_MODE) console.error(e);\r\n      }\r\n    }\r\n\r\n    // 2) Fallback (ou preferido): estrategista\r\n    try {\r\n      // Se preset não foi informado, usar um palpite baseado no diagnóstico do projeto\r\n      let preset = opcoes.preset;\r\n      if (!preset) {\r\n        const sinais = {\r\n          temPages: fileEntriesComAst.some((f) => /\\bpages\\//.test(f.relPath)),\r\n          temComponents: fileEntriesComAst.some((f) => /\\bcomponents\\//.test(f.relPath)),\r\n          temControllers: fileEntriesComAst.some((f) => /\\bcontrollers?\\//.test(f.relPath)),\r\n          temApi: fileEntriesComAst.some((f) => /\\bapi\\//.test(f.relPath)),\r\n          temExpress: false, // heurística rápida; poderia vir do grafo de deps\r\n          temSrc: fileEntriesComAst.some((f) => isInsideSrc(f.relPath)),\r\n          temCli: fileEntriesComAst.some((f) => /src\\/cli(\\b|\\/)/.test(f.relPath)),\r\n          temPrisma: fileEntriesComAst.some((f) => /\\bprisma\\//.test(f.relPath)),\r\n          temPackages: fileEntriesComAst.some((f) => f.relPath.startsWith('packages/')),\r\n        } as const;\r\n        const diag = diagnosticarProjeto(sinais);\r\n        // Mapeamento simples tipo → preset\r\n        if (diag.tipo === 'lib') preset = 'ts-lib';\r\n        else if (diag.tipo === 'api' || diag.tipo === 'cli' || diag.tipo === 'fullstack')\r\n          preset = 'node-community';\r\n        else preset = 'oraculo';\r\n      }\r\n      const planoAlt = await gerarPlanoEstrategico(\r\n        { arquivos: fileEntriesComAst, baseDir },\r\n        {\r\n          criarSubpastasPorEntidade: opcoes.criarSubpastasPorEntidade,\r\n          categoriasMapa: opcoes.categoriasMapa,\r\n          preset,\r\n        },\r\n      );\r\n      if (planoAlt && Array.isArray(planoAlt.mover)) {\r\n        return { plano: planoAlt, origem: 'estrategista' };\r\n      }\r\n    } catch (e) {\r\n      log.aviso('⚠️ Estrategista falhou ao sugerir plano.');\r\n      if (config.DEV_MODE) console.error(e);\r\n    }\r\n\r\n    return { plano: undefined, origem: 'nenhum' };\r\n  },\r\n\r\n  toMapaMoves(plano: PlanoSugestaoEstrutura | undefined) {\r\n    if (!plano || !Array.isArray(plano.mover))\r\n      return [] as { arquivo: string; ideal: string | null; atual: string }[];\r\n    return plano.mover.map((m) => {\r\n      const para = String(m.para || '');\r\n      const idx = para.lastIndexOf('/');\r\n      const ideal = idx > 0 ? para.substring(0, idx) : null;\r\n      return { arquivo: m.de, ideal, atual: m.de };\r\n    });\r\n  },\r\n\r\n  async aplicar(\r\n    mapaMoves: { arquivo: string; ideal: string | null; atual: string }[],\r\n    fileEntriesComAst: FileEntryWithAst[],\r\n    baseDir: string,\r\n  ) {\r\n    await corrigirEstrutura(mapaMoves, fileEntriesComAst, baseDir);\r\n  },\r\n\r\n  // Auxiliar: converter ocorrências para mapa de correções (fallback)\r\n  ocorrenciasParaMapa(ocorrencias?: Ocorrencia[]) {\r\n    const mapa = [] as { arquivo: string; ideal: string | null; atual: string }[];\r\n    if (!ocorrencias || !ocorrencias.length) return mapa;\r\n    for (const occ of ocorrencias) {\r\n      const rel = occ.relPath ?? occ.arquivo ?? 'arquivo desconhecido';\r\n      mapa.push({ arquivo: rel, ideal: null, atual: rel });\r\n    }\r\n    return mapa;\r\n  },\r\n};\r\n"]}