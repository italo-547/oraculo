{"version":3,"file":"analista-estrutura.js","sourceRoot":"","sources":["../../src/arquitetos/analista-estrutura.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,OAAO,IAAI,MAAM,WAAW,CAAC;AAC7B,OAAO,MAAM,MAAM,SAAS,CAAC;AAC7B,OAAO,EAAE,MAAM,EAAE,MAAM,iCAAiC,CAAC;AAGzD;;GAEG;AACH,MAAM,CAAC,MAAM,OAAO,GAA2B,EAAE,CAAC;AAClD,MAAM,YAAY,GAChB,OAAO,MAAM,CAAC,uBAAuB,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;AAS1F,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,WAA+B,EAC/B,WAAmB,OAAO,CAAC,GAAG,EAAE;IAEhC,MAAM,KAAK,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;IAEnC,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAClC,WAAW,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CACxB,KAAK,CAAC,GAAG,EAAE;QACT,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC;QAC1B,qGAAqG;QACrG,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC5C,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAC9C,IAAI,KAAK,GAAkB,IAAI,CAAC;QAEhC,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAC3D,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CACtD,CAAC;QAEF,IAAI,WAAW,EAAE,CAAC;YAChB,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAChC,MAAM,CAAC,EAAE,IAAI,CAAC,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACtD,IAAI,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC1B,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;QACH,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IACxC,CAAC,CAAC,CACH,CACF,CAAC;IAEF,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,OAAO,EAAE,iBAAiB,IAAI,qBAAqB,EAAE,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport path from 'node:path';\r\nimport pLimit from 'p-limit';\r\nimport { config } from '../nucleo/constelacao/cosmos.js';\r\nimport type { FileEntryWithAst } from '../tipos/tipos.js';\r\n\r\n/**\r\n * Exportado apenas para testes. Não usar fora de testes!\r\n */\r\nexport const CAMADAS: Record<string, string> = {};\r\nconst CONCORRENCIA =\r\n  typeof config.AUTOANALISE_CONCURRENCY === 'number' ? config.AUTOANALISE_CONCURRENCY : 5;\r\n\r\ninterface ResultadoEstrutural {\r\n  arquivo: string;\r\n  atual: string;\r\n  ideal: string | null;\r\n  motivo?: string;\r\n}\r\n\r\nexport async function analisarEstrutura(\r\n  fileEntries: FileEntryWithAst[],\r\n  _baseDir: string = process.cwd(),\r\n): Promise<ResultadoEstrutural[]> {\r\n  const limit = pLimit(CONCORRENCIA);\r\n\r\n  const resultados = await Promise.all(\r\n    fileEntries.map((entry) =>\r\n      limit(() => {\r\n        const rel = entry.relPath;\r\n        // Normaliza para separador POSIX para evitar dependência de platform e necessidade de mock em testes\r\n        const normalizado = rel.replace(/\\\\/g, '/');\r\n        const atual = normalizado.split('/')[0] || '';\r\n        let ideal: string | null = null;\r\n\r\n        const matchDireta = Object.entries(CAMADAS).find(([, dir]) =>\r\n          normalizado.startsWith(dir.replace(/\\\\/g, '/') + '/'),\r\n        );\r\n\r\n        if (matchDireta) {\r\n          ideal = matchDireta[1];\r\n        } else {\r\n          const nome = path.basename(rel);\r\n          const [, tipo] = /\\.([^.]+)\\.[^.]+$/.exec(nome) ?? [];\r\n          if (tipo && CAMADAS[tipo]) {\r\n            ideal = CAMADAS[tipo];\r\n          }\r\n        }\r\n\r\n        return { arquivo: rel, atual, ideal };\r\n      }),\r\n    ),\r\n  );\r\n\r\n  return resultados;\r\n}\r\n\r\nexport { analisarEstrutura as alinhamentoEstrutural };\r\n"]}