{"version":3,"file":"tipos.js","sourceRoot":"","sources":["../../src/tipos/tipos.ts"],"names":[],"mappings":"AAOA,MAAM,CAAN,IAAY,iBAKX;AALD,WAAY,iBAAiB;IAC3B,+CAA0B,CAAA;IAC1B,+CAA0B,CAAA;IAC1B,8BAAS,CAAA;IACT,mEAA8C,CAAA;AAChD,CAAC,EALW,iBAAiB,KAAjB,iBAAiB,QAK5B;AAED,MAAM,OAAO,aAAc,SAAQ,KAAK;IACtC,QAAQ,CAAU;IAClB,YAAY,KAAc;QACxB,KAAK,CAAC,kDAAkD,CAAC,CAAC;QAC1D,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;CACF;AAiDD,gFAAgF;AAChF,MAAM,UAAU,eAAe,CAC7B,IAA0E;IAE1E,MAAM,SAAS,GAAe;QAC5B,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,SAAS;QACjB,GAAG,IAAI;QACP,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;KAC/B,CAAC;IACF,OAAO,SAAc,CAAC;AACxB,CAAC;AAED,4BAA4B;AAC5B,MAAM,UAAU,sBAAsB,CAAC,IAKtC;IACC,OAAO,eAAe,CAAyB,EAAE,IAAI,EAAE,eAAe,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;AACrF,CAAC;AACD,MAAM,UAAU,wBAAwB,CAAC,IAQxC;IACC,OAAO,eAAe,CAA+B,EAAE,IAAI,EAAE,iBAAiB,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;AAC7F,CAAC;AACD,MAAM,UAAU,mBAAmB,CAAC,IAQnC;IACC,OAAO,eAAe,CAAsB,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;AAC9F,CAAC;AAwDD,mDAAmD;AACnD,MAAM,UAAU,aAAa,CAAqB,GAAM;IACtD,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ;QAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACvF,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,EAAE,CAAC;QAC3D,+CAA+C;IACjD,CAAC;IACD,IAAI,OAAO,GAAG,CAAC,OAAO,KAAK,UAAU;QAAE,MAAM,IAAI,KAAK,CAAC,YAAY,GAAG,CAAC,IAAI,qBAAqB,CAAC,CAAC;IAClG,OAAO,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5B,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\nexport interface ResultadoGuardian {\r\n  status: IntegridadeStatus;\r\n  detalhes?: string[];\r\n  baselineModificado?: boolean;\r\n}\r\n\r\nexport enum IntegridadeStatus {\r\n  Criado = 'baseline-criado',\r\n  Aceito = 'baseline-aceito',\r\n  Ok = 'ok',\r\n  AlteracoesDetectadas = 'alteracoes-detectadas',\r\n}\r\n\r\nexport class GuardianError extends Error {\r\n  detalhes: unknown;\r\n  constructor(erros: unknown) {\r\n    super('Integridade comprometida — execuções bloqueadas.');\r\n    this.name = 'GuardianError';\r\n    this.detalhes = erros;\r\n  }\r\n}\r\n\r\nexport type OcorrenciaNivel = 'erro' | 'aviso' | 'info' | 'sucesso';\r\n\r\n// Ocorrências Discriminadas\r\nexport interface OcorrenciaBase {\r\n  tipo: string;\r\n  mensagem: string;\r\n  nivel?: OcorrenciaNivel;\r\n  relPath?: string;\r\n  linha?: number;\r\n  coluna?: number;\r\n  origem?: string;\r\n  arquivo?: string;\r\n}\r\n\r\nexport interface OcorrenciaErroAnalista extends OcorrenciaBase {\r\n  tipo: 'ERRO_ANALISTA';\r\n  stack?: string;\r\n}\r\n\r\nexport interface OcorrenciaComplexidadeFuncao extends OcorrenciaBase {\r\n  tipo: 'FUNCAO_COMPLEXA';\r\n  linhas?: number;\r\n  parametros?: number;\r\n  aninhamento?: number;\r\n  limites?: { maxLinhas?: number; maxParametros?: number; maxAninhamento?: number };\r\n}\r\n\r\nexport interface OcorrenciaParseErro extends OcorrenciaBase {\r\n  tipo: 'PARSE_ERRO';\r\n  detalhe?: string;\r\n  trecho?: string;\r\n}\r\n\r\n// Tipo genérico (fallback) para ocorrência (compatibilidade com formatos antigos)\r\nexport interface OcorrenciaGenerica extends OcorrenciaBase {\r\n  [k: string]: unknown;\r\n}\r\n\r\nexport type Ocorrencia =\r\n  | OcorrenciaErroAnalista\r\n  | OcorrenciaComplexidadeFuncao\r\n  | OcorrenciaParseErro\r\n  | OcorrenciaGenerica; // manter por compatibilidade com formatos antigos\r\n\r\n// Severidade textual padronizada (complementa um campo numérico opcional)\r\nexport type SeveridadeTexto = 'info' | 'aviso' | 'risco' | 'critico';\r\n\r\n// Construtor simples para ocorrência garantindo escape básico e campos mínimos.\r\nexport function criarOcorrencia<T extends Ocorrencia>(\r\n  base: Pick<T, 'tipo' | 'mensagem'> & Omit<Partial<T>, 'tipo' | 'mensagem'>,\r\n): T {\r\n  const resultado: Ocorrencia = {\r\n    nivel: 'info',\r\n    origem: 'oraculo',\r\n    ...base,\r\n    mensagem: base.mensagem.trim(),\r\n  };\r\n  return resultado as T;\r\n}\r\n\r\n// Auxiliares especializados\r\nexport function ocorrenciaErroAnalista(data: {\r\n  mensagem: string;\r\n  relPath?: string;\r\n  stack?: string;\r\n  origem?: string;\r\n}): OcorrenciaErroAnalista {\r\n  return criarOcorrencia<OcorrenciaErroAnalista>({ tipo: 'ERRO_ANALISTA', ...data });\r\n}\r\nexport function ocorrenciaFuncaoComplexa(data: {\r\n  mensagem: string;\r\n  relPath?: string;\r\n  linhas?: number;\r\n  parametros?: number;\r\n  aninhamento?: number;\r\n  limites?: { maxLinhas?: number; maxParametros?: number; maxAninhamento?: number };\r\n  origem?: string;\r\n}): OcorrenciaComplexidadeFuncao {\r\n  return criarOcorrencia<OcorrenciaComplexidadeFuncao>({ tipo: 'FUNCAO_COMPLEXA', ...data });\r\n}\r\nexport function ocorrenciaParseErro(data: {\r\n  mensagem: string;\r\n  relPath?: string;\r\n  detalhe?: string;\r\n  trecho?: string;\r\n  origem?: string;\r\n  linha?: number;\r\n  coluna?: number;\r\n}): OcorrenciaParseErro {\r\n  return criarOcorrencia<OcorrenciaParseErro>({ tipo: 'PARSE_ERRO', nivel: 'erro', ...data });\r\n}\r\n\r\nexport type TecnicaAplicarResultado = Ocorrencia | Ocorrencia[] | null | undefined;\r\n\r\nexport interface Tecnica {\r\n  nome?: string;\r\n  global?: boolean;\r\n  test?: (relPath: string) => boolean;\r\n  aplicar: (\r\n    src: string,\r\n    relPath: string,\r\n    ast: import('@babel/traverse').NodePath<import('@babel/types').Node> | null,\r\n    fullPath?: string,\r\n    contexto?: ContextoExecucao,\r\n  ) => TecnicaAplicarResultado | Promise<TecnicaAplicarResultado>;\r\n}\r\n\r\n// Tipos para configuração dinâmica de inclusão/exclusão\r\n// Nomes em português (preferidos) com aliases em inglês para compatibilidade de código existente.\r\nexport type RegraIncluiExclui = {\r\n  /** força inclusão (true) */\r\n  include?: boolean;\r\n  /** força exclusão (true) */\r\n  exclude?: boolean;\r\n  /** padrões simples (substring) que, se presentes, incluem */\r\n  patterns?: string[];\r\n  /** função personalizada para decidir inclusão */\r\n  custom?: (relPath: string, entry: import('node:fs').Dirent) => boolean;\r\n};\r\n\r\nexport type ConfigIncluiExclui = {\r\n  /** Inclusões globais por substring (compat) */\r\n  globalInclude?: string[];\r\n  /** Exclusões globais por substring (compat) */\r\n  globalExclude?: string[];\r\n  /** Globs micromatch globais (prioridade: excludeGlob > exclude > includeGlob > include) */\r\n  globalIncludeGlob?: string[];\r\n  /** Globs micromatch globais para exclusão (mais forte) */\r\n  globalExcludeGlob?: string[];\r\n  /** Regras por diretório (chave é prefixo, ex.: \"src/\") */\r\n  dirRules?: Record<string, RegraIncluiExclui>;\r\n};\r\n\r\n// Aliases para manter compatibilidade com nomes anteriores (inglês)\r\nexport type IncludeExcludeRule = RegraIncluiExclui;\r\nexport type IncludeExcludeConfig = ConfigIncluiExclui;\r\n\r\n// Interface futura unificada para analistas (superset de Tecnica)\r\nexport interface Analista extends Tecnica {\r\n  nome: string; // obrigatório para identificação\r\n  categoria?: string; // ex: 'complexidade', 'estrutura'\r\n  descricao?: string; // breve resumo exibido em listagens\r\n  limites?: Record<string, number>; // ex: { maxLinhas: 30 }\r\n  sempreAtivo?: boolean; // ignora filtros\r\n}\r\n\r\n// Fábrica para criar analista com validação mínima\r\nexport function criarAnalista<A extends Analista>(def: A): A {\r\n  if (!def || typeof def !== 'object') throw new Error('Definição de analista inválida');\r\n  if (!def.nome || (/\\s/.test(def.nome) === false) === false) {\r\n    // nome pode ter hifens, apenas exige não vazio\r\n  }\r\n  if (typeof def.aplicar !== 'function') throw new Error(`Analista ${def.nome} sem função aplicar`);\r\n  return Object.freeze(def);\r\n}\r\n\r\nexport interface AmbienteExecucao {\r\n  arquivosValidosSet: Set<string>;\r\n  guardian: unknown;\r\n}\r\n\r\nexport interface ContextoExecucao {\r\n  baseDir: string;\r\n  arquivos: FileEntryWithAst[];\r\n  ambiente?: AmbienteExecucao;\r\n}\r\n\r\nexport type TipoProjeto =\r\n  | 'desconhecido'\r\n  | 'landing'\r\n  | 'api'\r\n  | 'lib'\r\n  | 'cli'\r\n  | 'fullstack'\r\n  | 'monorepo';\r\n\r\nexport interface SinaisProjeto {\r\n  temPages?: boolean;\r\n  temComponents?: boolean;\r\n  temControllers?: boolean;\r\n  temApi?: boolean;\r\n  temExpress?: boolean;\r\n  temSrc?: boolean;\r\n  temCli?: boolean;\r\n  temPrisma?: boolean;\r\n  temPackages?: boolean;\r\n}\r\n\r\nexport interface DiagnosticoProjeto {\r\n  tipo: TipoProjeto;\r\n  sinais: (keyof SinaisProjeto)[];\r\n  confiabilidade: number;\r\n}\r\n\r\nexport interface ResultadoInquisicao {\r\n  totalArquivos: number;\r\n  ocorrencias: Ocorrencia[];\r\n  arquivosAnalisados: string[];\r\n  timestamp: number;\r\n  duracaoMs: number;\r\n  /** Métricas detalhadas da execução quando ANALISE_METRICAS_ENABLED. */\r\n  metricas?: MetricaExecucao;\r\n}\r\n\r\nexport interface MetricaAnalista {\r\n  nome: string;\r\n  duracaoMs: number;\r\n  ocorrencias: number;\r\n  global: boolean;\r\n}\r\n\r\nexport interface MetricaExecucao {\r\n  totalArquivos: number;\r\n  tempoParsingMs: number;\r\n  tempoAnaliseMs: number;\r\n  cacheAstHits: number;\r\n  cacheAstMiss: number;\r\n  analistas: MetricaAnalista[];\r\n  topAnalistas?: TopAnalista[];\r\n}\r\n\r\nexport interface TopAnalista {\r\n  nome: string;\r\n  totalMs: number;\r\n  mediaMs: number;\r\n  execucoes: number;\r\n  ocorrencias: number;\r\n}\r\n\r\nexport interface ResultadoInquisicaoCompleto extends ResultadoInquisicao {\r\n  arquivosAnalisados: string[];\r\n  fileEntries: FileEntryWithAst[];\r\n  guardian: unknown;\r\n}\r\n\r\n// Arquétipos de estrutura (biblioteca de estruturas padrão)\r\nexport interface ArquetipoEstruturaDef {\r\n  nome: string;\r\n  descricao: string;\r\n  requiredDirs?: string[]; // diretórios obrigatórios (ex: ['src'])\r\n  optionalDirs?: string[]; // diretórios que aumentam score se presentes\r\n  forbiddenDirs?: string[]; // diretórios que penalizam se presentes\r\n  rootFilesAllowed?: string[]; // arquivos permitidos na raiz (ex: package.json, tsconfig.json)\r\n  dependencyHints?: string[]; // dependências cujo presence aumenta score\r\n  filePresencePatterns?: string[]; // padrões glob simples (substring match) que aumentam score\r\n  pesoBase?: number; // peso para desempate\r\n}\r\n\r\n// Arquétipo personalizado do usuário\r\nexport interface ArquetipoPersonalizado {\r\n  /** Nome personalizado do projeto */\r\n  nome: string;\r\n  /** Descrição do projeto personalizado */\r\n  descricao?: string;\r\n  /** Arquétipo oficial base (ex: 'bot', 'cli', 'api') */\r\n  arquetipoOficial: string;\r\n  /** Estrutura personalizada do projeto */\r\n  estruturaPersonalizada: {\r\n    /** Diretórios principais do projeto */\r\n    diretorios: string[];\r\n    /** Arquivos-chave do projeto */\r\n    arquivosChave: string[];\r\n    /** Padrões de nomenclatura personalizados */\r\n    padroesNomenclatura?: Record<string, string>;\r\n  };\r\n  /** Melhores práticas personalizadas */\r\n  melhoresPraticas?: {\r\n    /** Estruturas recomendadas */\r\n    recomendado?: string[];\r\n    /** Estruturas a evitar */\r\n    evitar?: string[];\r\n    /** Notas sobre organização */\r\n    notas?: string[];\r\n  };\r\n  /** Metadados do arquétipo personalizado */\r\n  metadata?: {\r\n    /** Quando foi criado */\r\n    criadoEm: string;\r\n    /** Versão do formato */\r\n    versao: string;\r\n    /** Notas do usuário */\r\n    notasUsuario?: string;\r\n  };\r\n}\r\n\r\nexport interface ArquetipoDeteccaoAnomalia {\r\n  path: string;\r\n  motivo: string;\r\n  sugerido?: string;\r\n}\r\n\r\nexport interface ArquetipoDeteccaoAnomalia {\r\n  path: string;\r\n  motivo: string;\r\n  sugerido?: string;\r\n}\r\n\r\nexport interface ResultadoDeteccaoArquetipo {\r\n  nome: string;\r\n  descricao: string;\r\n  score: number;\r\n  confidence: number; // 0-100\r\n  matchedRequired: string[];\r\n  missingRequired: string[];\r\n  matchedOptional: string[];\r\n  dependencyMatches: string[];\r\n  filePatternMatches: string[];\r\n  forbiddenPresent: string[];\r\n  anomalias: ArquetipoDeteccaoAnomalia[];\r\n  planoSugestao?: PlanoSugestaoEstrutura;\r\n  sugestaoPadronizacao?: string;\r\n  explicacaoSimilaridade?: string;\r\n  candidatoExtra?: string;\r\n}\r\n\r\n// Plano de reorganização estrutural sugerido (não executado automaticamente)\r\n// PlanoSugestaoEstrutura movido para './plano-estrutura'\r\nexport type { PlanoSugestaoEstrutura } from './plano-estrutura.js';\r\n\r\nexport interface SnapshotEstruturaBaseline {\r\n  version: 1;\r\n  timestamp: string;\r\n  arquetipo: string;\r\n  confidence: number;\r\n  arquivosRaiz: string[];\r\n}\r\n\r\n// Diferença entre baseline e detecção atual de arquétipos\r\nexport interface ArquetipoDrift {\r\n  alterouArquetipo: boolean;\r\n  anterior?: string;\r\n  atual?: string;\r\n  deltaConfidence: number;\r\n  arquivosRaizNovos: string[];\r\n  arquivosRaizRemovidos: string[];\r\n}\r\n\r\nexport interface ScanOptions {\r\n  includeContent?: boolean;\r\n  includeAst?: boolean;\r\n}\r\n\r\nexport interface InquisicaoOptions {\r\n  includeContent?: boolean;\r\n  incluirMetadados?: boolean;\r\n  skipExec?: boolean; // quando true apenas escaneia e prepara (se solicitado) sem executar analistas\r\n}\r\n\r\nexport type Contador = Record<string, number>;\r\n\r\nexport interface Estatisticas {\r\n  requires: Contador;\r\n  consts: Contador;\r\n  exports: Contador;\r\n  vars: Contador;\r\n  lets: Contador;\r\n  evals: Contador;\r\n  withs: Contador;\r\n}\r\n\r\nexport interface ResultadoCorrecao {\r\n  correcoesAplicadas: number;\r\n}\r\n\r\nexport interface ResultadoPoda {\r\n  arquivosOrfaos: ArquivoFantasma[];\r\n}\r\n\r\nexport interface ArquivoFantasma {\r\n  arquivo: string;\r\n  referenciado: boolean;\r\n  diasInativo: number;\r\n}\r\n\r\nexport interface Pendencia {\r\n  arquivo: string;\r\n  motivo: string;\r\n  detectedAt: number;\r\n  scheduleAt: number;\r\n}\r\n\r\nexport interface HistoricoItem {\r\n  arquivo: string;\r\n  movidoEm: string;\r\n  motivo: string;\r\n}\r\n\r\nexport interface MoveReversao {\r\n  id: string;\r\n  timestamp: string;\r\n  origem: string;\r\n  destino: string;\r\n  motivo: string;\r\n  importsReescritos: boolean;\r\n  conteudoOriginal?: string;\r\n  conteudoFinal?: string;\r\n}\r\n\r\nexport interface MapaReversao {\r\n  versao: string;\r\n  moves: MoveReversao[];\r\n  metadata: {\r\n    totalMoves: number;\r\n    ultimoMove: string;\r\n    podeReverter: boolean;\r\n  };\r\n}\r\n\r\nexport interface RelatorioCompacto {\r\n  resumo: {\r\n    totalArquivos: number;\r\n    totalOcorrencias: number;\r\n    tiposOcorrencias: Record<string, number>;\r\n    arquivosComProblemas: number;\r\n    integridadeGuardian: string;\r\n    baselineModificado: boolean;\r\n    arquivosOrfaosDetectados: number;\r\n  };\r\n  detalhesOcorrencias: {\r\n    filePath?: string;\r\n    tipoOcorrencia?: string;\r\n    mensagem?: string;\r\n    linha?: number;\r\n    coluna?: number;\r\n  }[];\r\n}\r\n\r\nexport type ComandoOraculo = 'diagnosticar' | 'guardian' | 'podar' | 'reestruturar' | 'atualizar'; //\r\n\r\nimport type { NodePath } from '@babel/traverse';\r\nimport type { PlanoSugestaoEstrutura } from './plano-estrutura.js';\r\n\r\nexport type OrigemArquivo = 'local' | 'remoto' | 'gerado';\r\n\r\nexport interface FileEntry {\r\n  fullPath: string;\r\n  relPath: string;\r\n  content: string | null;\r\n  origem?: OrigemArquivo;\r\n  ultimaModificacao?: number;\r\n}\r\n\r\nexport interface FileEntryWithAst extends FileEntry {\r\n  ast: import('@babel/traverse').NodePath<import('@babel/types').Node> | undefined;\r\n}\r\n\r\nexport type FileMap = Record<string, FileEntry>;\r\nexport type FileMapWithAst = Record<string, FileEntryWithAst>;\r\n\r\n// Interfaces para saída JSON do comando diagnosticar\r\nexport interface ParseErrosJson {\r\n  totalOriginais: number;\r\n  totalExibidos: number;\r\n  agregados: number;\r\n}\r\n\r\nexport interface EstruturaIdentificadaJson {\r\n  melhores: ResultadoDeteccaoArquetipo[];\r\n  baseline: SnapshotEstruturaBaseline | null;\r\n  drift: ArquetipoDrift;\r\n}\r\n\r\nexport interface LinguagensJson {\r\n  total: number;\r\n  extensoes: Record<string, number>;\r\n}\r\n\r\nexport interface SaidaJsonDiagnostico {\r\n  status: 'ok' | 'problemas' | 'erro';\r\n  totalOcorrencias: number;\r\n  guardian: 'verificado' | 'nao-verificado';\r\n  tiposOcorrencias: Record<string, number>;\r\n  parseErros: ParseErrosJson;\r\n  ocorrencias: Ocorrencia[];\r\n  estruturaIdentificada?: EstruturaIdentificadaJson;\r\n  metricas?: MetricaExecucao;\r\n  linguagens: LinguagensJson;\r\n}\r\n"]}