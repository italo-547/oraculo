{"version":3,"file":"seguranca.js","sourceRoot":"","sources":["../../../src/nucleo/constelacao/seguranca.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,OAAO,IAAI,MAAM,WAAW,CAAC;AAE7B,qHAAqH;AACrH,MAAM,UAAU,gBAAgB,CAAC,GAAW;IAC1C,IAAI,CAAC,GAAG;QAAE,OAAO,EAAE,CAAC;IACpB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAC5D,MAAM,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACtC,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QAC/B,gEAAgE;QAChE,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACnD,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;IACD,OAAO,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACvC,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,OAAe,EAAE,IAAY;IACtD,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACzC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AACjE,CAAC;AAED,MAAM,UAAU,oBAAoB,CAClC,OAAe,EACf,SAAiB;IAEjB,IAAI,CAAC;QACH,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,CAAC;YACvD,OAAO,EAAE,IAAI,EAAE,2CAA2C,EAAE,CAAC;QAC/D,CAAC;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,CAAC;YACpC,OAAO,EAAE,IAAI,EAAE,4CAA4C,EAAE,CAAC;QAChE,CAAC;QACD,gEAAgE;QAChE,MAAM,SAAS,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC;YAC9C,OAAO,EAAE,IAAI,EAAE,kCAAkC,EAAE,CAAC;QACtD,CAAC;QACD,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;IAChC,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,EAAE,IAAI,EAAG,CAAW,CAAC,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;IACrD,CAAC;AACH,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,MAAc;IAC9C,IAAI,MAAM,CAAC,MAAM,GAAG,GAAG;QAAE,OAAO,KAAK,CAAC;IACtC,gEAAgE;IAChE,MAAM,WAAW,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;IACzD,IAAI,WAAW,IAAI,CAAC;QAAE,OAAO,KAAK,CAAC;IACnC,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,OAAiB;IAClD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport path from 'node:path';\r\n\r\n// Normaliza um caminho relativo eliminando tentativas de escape (..), barras duplicadas e separadores inconsistentes\r\nexport function sanitizarRelPath(rel: string): string {\r\n  if (!rel) return '';\r\n  rel = rel.replace(/^[A-Za-z]:\\\\?/u, '').replace(/^\\/+/, '');\r\n  const norm = rel.replace(/\\\\+/g, '/');\r\n  const collapsed = path.posix.normalize(norm);\r\n  if (collapsed.startsWith('..')) {\r\n    // remove todos os prefixos de ../ e barras iniciais resultantes\r\n    const semDots = collapsed.replace(/^(\\.\\/?)+/, '');\r\n    return semDots.replace(/^\\/+/, '');\r\n  }\r\n  return collapsed.replace(/^\\/+/, '');\r\n}\r\n\r\nexport function estaDentro(baseDir: string, alvo: string): boolean {\r\n  const rel = path.relative(baseDir, alvo);\r\n  return !!rel && !rel.startsWith('..') && !path.isAbsolute(rel);\r\n}\r\n\r\nexport function resolverPluginSeguro(\r\n  baseDir: string,\r\n  pluginRel: string,\r\n): { caminho?: string; erro?: string } {\r\n  try {\r\n    if (typeof pluginRel !== 'string' || !pluginRel.trim()) {\r\n      return { erro: 'entrada de plugin inválida (string vazia)' };\r\n    }\r\n    const resolvido = path.resolve(baseDir, pluginRel);\r\n    if (!estaDentro(baseDir, resolvido)) {\r\n      return { erro: 'plugin fora da raiz do projeto (bloqueado)' };\r\n    }\r\n    // Restringe extensões para reduzir risco de execução arbitrária\r\n    const permitido = [/\\.(c|m)?js$/i, /\\.ts$/i];\r\n    if (!permitido.some((r) => r.test(resolvido))) {\r\n      return { erro: 'extensão de plugin não permitida' };\r\n    }\r\n    return { caminho: resolvido };\r\n  } catch (e) {\r\n    return { erro: (e as Error).message || String(e) };\r\n  }\r\n}\r\n\r\nexport function validarGlobBasico(padrao: string): boolean {\r\n  if (padrao.length > 300) return false;\r\n  // Bloqueia mais de 4 ocorrências de '**' mesmo não consecutivas\r\n  const ocorrencias = (padrao.match(/\\*\\*/g) || []).length;\r\n  if (ocorrencias >= 5) return false;\r\n  return true;\r\n}\r\n\r\nexport function filtrarGlobSeguros(padroes: string[]): string[] {\r\n  return padroes.filter((p) => validarGlobBasico(p));\r\n}\r\n"]}