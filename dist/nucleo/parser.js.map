{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../src/nucleo/parser.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport { parse as babelParse, ParserOptions } from '@babel/parser';\r\nimport { File as BabelFile } from '@babel/types';\r\n// Parsers externos leves para outras linguagens\r\nimport { parseDocument } from 'htmlparser2';\r\nimport { XMLParser } from 'fast-xml-parser';\r\nimport * as csstree from 'css-tree';\r\nimport { createRequire } from 'module';\r\nconst localRequire = createRequire(import.meta.url);\r\nimport { log } from '@nucleo/constelacao/log.js';\r\n\r\n// Mantemos a assinatura retornando BabelFile | null para não quebrar tipos externos, mas\r\n// para linguagens não-Babel geramos um objeto \"compat\" mínimo com File/Program vazio\r\n// e ast original em oraculoExtra.\r\ninterface BabelFileExtra extends BabelFile {\r\n  oraculoExtra?: { lang: string; rawAst: unknown };\r\n}\r\ntype ParserFunc = (codigo: string, plugins?: string[]) => BabelFile | BabelFileExtra | null;\r\n\r\nfunction parseComBabel(codigo: string, plugins?: string[]): BabelFile | null {\r\n  // Plugins padrão ampliados para cobrir padrões amplamente usados em node_modules\r\n  const defaultPlugins = [\r\n    'typescript',\r\n    'jsx',\r\n    'decorators-legacy',\r\n    // Suporte a import attributes/assertions modernos\r\n    'importAttributes',\r\n    'importAssertions',\r\n    // Class fields/methods private (comuns em libs modernas)\r\n    'classProperties',\r\n    'classPrivateProperties',\r\n    'classPrivateMethods',\r\n    'optionalChaining',\r\n    'nullishCoalescingOperator',\r\n    'topLevelAwait',\r\n  ];\r\n  const options: ParserOptions = {\r\n    sourceType: 'unambiguous',\r\n    plugins: (Array.isArray(plugins) ? plugins : defaultPlugins) as ParserOptions['plugins'],\r\n  };\r\n  try {\r\n    return babelParse(codigo, options);\r\n  } catch (e) {\r\n    // Mantém comportamento resiliente: parser inválido retorna null (testes esperam isso)\r\n    log.debug(`⚠️ Erro de parsing Babel: ${(e as Error).message}`);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction wrapMinimal(lang: string, rawAst: unknown): BabelFileExtra {\r\n  return {\r\n    type: 'File',\r\n    program: { type: 'Program', body: [], sourceType: 'script', directives: [] },\r\n    comments: [],\r\n    tokens: [],\r\n    oraculoExtra: { lang, rawAst },\r\n  };\r\n}\r\n\r\nfunction parseComKotlin(codigo: string) {\r\n  // Heurística simples: extrai nomes de classes/objects/fun\r\n  const classes = Array.from(codigo.matchAll(/\\b(class|object|fun)\\s+([A-Za-z0-9_]+)/g)).map(\r\n    (m) => ({\r\n      tipo: m[1],\r\n      nome: m[2],\r\n    }),\r\n  );\r\n  log.debug(`🧪 Kotlin pseudo-parse: ${classes.length} símbolos`);\r\n  return wrapMinimal('kotlin', { symbols: classes });\r\n}\r\n\r\nfunction parseComJava(codigo: string) {\r\n  try {\r\n    // Lazy require: evita custo de import em ambientes que não analisam Java\r\n    const { parse } = localRequire('java-parser');\r\n    const ast = parse(codigo);\r\n    log.debug('☕ Java parse realizado');\r\n    return wrapMinimal('java', ast);\r\n  } catch (e) {\r\n    log.debug(`⚠️ Erro Java parse: ${(e as Error).message}`);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction parseComTypeScript(codigo: string, tsx = false) {\r\n  try {\r\n    // Lazy require para reduzir custo quando não necessário\r\n    const ts: typeof import('typescript') = localRequire('typescript');\r\n    const sf = ts.createSourceFile(\r\n      tsx ? 'file.tsx' : 'file.ts',\r\n      codigo,\r\n      ts.ScriptTarget.Latest,\r\n      /*setParentNodes*/ false,\r\n      tsx ? ts.ScriptKind.TSX : ts.ScriptKind.TS,\r\n    );\r\n    // Retorna AST do TS como extra; suficiente para gerar sentinel no pipeline\r\n    return wrapMinimal(tsx ? 'tsx-tsc' : 'ts-tsc', {\r\n      kind: sf.kind,\r\n      statements: sf.statements?.length ?? 0,\r\n    });\r\n  } catch (e) {\r\n    log.debug(`⚠️ Erro TS compiler parse: ${(e as Error).message}`);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction parseComXml(codigo: string) {\r\n  try {\r\n    const parser = new XMLParser({ ignoreAttributes: false, attributeNamePrefix: '@' });\r\n    const ast = parser.parse(codigo);\r\n    return wrapMinimal('xml', ast);\r\n  } catch (e) {\r\n    log.debug(`⚠️ Erro XML parse: ${(e as Error).message}`);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction parseComHtmlFunc(codigo: string) {\r\n  try {\r\n    const dom = parseDocument(codigo, { xmlMode: false });\r\n    return wrapMinimal('html', dom);\r\n  } catch (e) {\r\n    log.debug(`⚠️ Erro HTML parse: ${(e as Error).message}`);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction parseComCss(codigo: string) {\r\n  try {\r\n    const ast = csstree.parse(codigo, { positions: false });\r\n    return wrapMinimal('css', ast);\r\n  } catch (e) {\r\n    log.debug(`⚠️ Erro CSS parse: ${(e as Error).message}`);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction parseComGradle(codigo: string) {\r\n  // Gradle Groovy/KTS – heurística simples\r\n  const plugins = Array.from(codigo.matchAll(/id\\s+['\"]([A-Za-z0-9_.-]+)['\"]/g)).map((m) => m[1]);\r\n  const deps = Array.from(codigo.matchAll(/implementation\\s+['\"]([^'\"]+)['\"]/g)).map((m) => m[1]);\r\n  return wrapMinimal('gradle', { plugins, deps });\r\n}\r\n\r\nexport const PARSERS = new Map<string, ParserFunc>([\r\n  ['.js', parseComBabel],\r\n  ['.jsx', parseComBabel],\r\n  ['.ts', parseComBabel],\r\n  ['.tsx', parseComBabel],\r\n  ['.mjs', parseComBabel],\r\n  ['.cjs', parseComBabel],\r\n  // Evitamos .d.ts explicitamente: não há AST útil para nossas análises\r\n  ['.d.ts', () => null],\r\n  ['.kt', parseComKotlin],\r\n  ['.kts', parseComKotlin],\r\n  ['.java', parseComJava],\r\n  ['.xml', parseComXml],\r\n  ['.html', parseComHtmlFunc],\r\n  ['.htm', parseComHtmlFunc],\r\n  ['.css', parseComCss],\r\n  ['.gradle', parseComGradle],\r\n  ['.gradle.kts', parseComGradle],\r\n]);\r\n\r\nexport const EXTENSOES_SUPORTADAS = Array.from(PARSERS.keys()).filter((ext) => ext !== '.d.ts');\r\n\r\ninterface DecifrarSintaxeOpts {\r\n  plugins?: string[];\r\n  timeoutMs?: number;\r\n}\r\n\r\nexport async function decifrarSintaxe(\r\n  codigo: string,\r\n  ext: string,\r\n  opts: DecifrarSintaxeOpts = {},\r\n): Promise<BabelFile | null> {\r\n  const parser = PARSERS.get(ext);\r\n  if (!parser) {\r\n    log.debug(`⚠️ Nenhum parser disponível para extensão: ${ext}`);\r\n    return null;\r\n  }\r\n\r\n  // Primeira tentativa com plugins padrão (ou fornecidos)\r\n  let parseResult = parser(codigo, opts.plugins);\r\n  // Fallbacks específicos para .js/.mjs: tentar Flow quando a primeira tentativa falhar\r\n  if (parseResult == null && (ext === '.js' || ext === '.mjs' || ext === '.cjs')) {\r\n    try {\r\n      // Heurística rápida: detecta uso de Flow\r\n      const pareceFlow = /@flow\\b/.test(codigo) || /\\bimport\\s+type\\b/.test(codigo);\r\n      if (pareceFlow) {\r\n        const flowPlugins = [\r\n          'flow',\r\n          'jsx',\r\n          'decorators-legacy',\r\n          'importAttributes',\r\n          'importAssertions',\r\n          'classProperties',\r\n          'classPrivateProperties',\r\n          'classPrivateMethods',\r\n          'optionalChaining',\r\n          'nullishCoalescingOperator',\r\n          'topLevelAwait',\r\n        ];\r\n        parseResult = parseComBabel(codigo, flowPlugins);\r\n      }\r\n      // Se ainda nulo e não parece Flow, tenta um conjunto \"JS moderno\" sem TypeScript (para .js puros)\r\n      if (parseResult == null) {\r\n        const jsModernPlugins = [\r\n          'jsx',\r\n          'decorators-legacy',\r\n          'importAttributes',\r\n          'importAssertions',\r\n          'classProperties',\r\n          'classPrivateProperties',\r\n          'classPrivateMethods',\r\n          'optionalChaining',\r\n          'nullishCoalescingOperator',\r\n          'topLevelAwait',\r\n        ];\r\n        parseResult = parseComBabel(codigo, jsModernPlugins);\r\n      }\r\n    } catch {\r\n      // mantém null\r\n    }\r\n  }\r\n\r\n  // Fallback usando TypeScript compiler quando Babel falhar em .ts/.tsx\r\n  if (parseResult == null && (ext === '.ts' || ext === '.tsx')) {\r\n    const tsx = ext === '.tsx';\r\n    const tsParsed = parseComTypeScript(codigo, tsx);\r\n    if (tsParsed) return Promise.resolve(tsParsed as unknown as BabelFile);\r\n  }\r\n\r\n  if (opts.timeoutMs) {\r\n    return (async () => {\r\n      let timer: NodeJS.Timeout | null = null;\r\n      try {\r\n        const race = Promise.race([\r\n          Promise.resolve(parseResult),\r\n          new Promise<null>((resolve) => {\r\n            timer = setTimeout(() => {\r\n              log.debug(`⏱️ Parsing timeout após ${opts.timeoutMs}ms para extensão ${ext}`);\r\n              resolve(null);\r\n            }, opts.timeoutMs);\r\n          }),\r\n        ]);\r\n        return await race;\r\n      } finally {\r\n        if (timer) clearTimeout(timer);\r\n      }\r\n    })();\r\n  }\r\n\r\n  return Promise.resolve(parseResult);\r\n}\r\n"]}