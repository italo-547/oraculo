{"version":3,"file":"detector-dependencias.js","sourceRoot":"","sources":["../../src/analistas/detector-dependencias.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport path from 'node:path';\r\nimport { traverse } from '@nucleo/constelacao/traverse.js';\r\nimport type { TecnicaAplicarResultado, ContextoExecucao, Ocorrencia } from '@tipos/tipos.js';\r\nimport type * as t from '@babel/types';\r\nimport type { NodePath } from '@babel/traverse';\r\nexport const grafoDependencias = new Map<string, Set<string>>();\r\n\r\n/**\r\n * Normaliza o caminho de import para uma chave consistente.\r\n */\r\nfunction normalizarModulo(mod: string, relPath: string): string {\r\n  if (mod.startsWith('.')) {\r\n    const resolved = path.normalize(path.join(path.dirname(relPath), mod)).replace(/\\\\/g, '/');\r\n    return resolved;\r\n  }\r\n  return mod;\r\n}\r\n\r\n/**\r\n * Analisa dependências do arquivo (import/require), detecta padrões problemáticos e atualiza grafo global.\r\n * Retorna ocorrências para imports/require suspeitos, mistos, circulares, etc.\r\n */\r\nexport const detectorDependencias = {\r\n  nome: 'detector-dependencias',\r\n  test(relPath: string): boolean {\r\n    return relPath.endsWith('.ts') || relPath.endsWith('.js');\r\n  },\r\n\r\n  aplicar(\r\n    src: string,\r\n    relPath: string,\r\n    ast: NodePath | null,\r\n    _fullPath?: string,\r\n    contexto?: ContextoExecucao,\r\n  ): TecnicaAplicarResultado {\r\n    if (!ast) return [];\r\n\r\n    const ocorrencias: Ocorrencia[] = [];\r\n    const tiposImport: Set<'import' | 'require'> = new Set();\r\n    const arquivosExistentes = contexto\r\n      ? new Set(contexto.arquivos.map((f) => f.relPath))\r\n      : undefined;\r\n    // Conjunto de dependências (criado sob demanda quando houver refs)\r\n    let depsSet: Set<string> | undefined = grafoDependencias.get(relPath);\r\n\r\n    // Detecta padrões problemáticos\r\n    traverse(ast.node, {\r\n      ImportDeclaration(p: NodePath<t.ImportDeclaration>) {\r\n        tiposImport.add('import');\r\n        const val = p.node.source.value;\r\n        // Alimenta grafo\r\n        if (!depsSet) {\r\n          depsSet = new Set<string>();\r\n          grafoDependencias.set(relPath, depsSet);\r\n        }\r\n        depsSet.add(normalizarModulo(val, relPath));\r\n        // Import externo\r\n        if (!val.startsWith('.') && !val.startsWith('/')) {\r\n          ocorrencias.push({\r\n            tipo: 'info',\r\n            mensagem: `Importação de dependência externa: '${val}'`,\r\n            arquivo: relPath,\r\n            linha: p.node.loc?.start.line,\r\n            coluna: p.node.loc?.start.column,\r\n          });\r\n        }\r\n        // Import relativo longo\r\n        if (val.startsWith('.') && val.split('../').length > 3) {\r\n          ocorrencias.push({\r\n            tipo: 'aviso',\r\n            mensagem: `Import relativo sobe muitos diretórios: '${val}'`,\r\n            arquivo: relPath,\r\n            linha: p.node.loc?.start.line,\r\n            coluna: p.node.loc?.start.column,\r\n          });\r\n        }\r\n        // Import de .js em projeto TS\r\n        if (relPath.endsWith('.ts') && val.endsWith('.js')) {\r\n          ocorrencias.push({\r\n            tipo: 'alerta',\r\n            mensagem: `Importação de arquivo .js em TypeScript: '${val}'`,\r\n            arquivo: relPath,\r\n            linha: p.node.loc?.start.line,\r\n            coluna: p.node.loc?.start.column,\r\n          });\r\n        }\r\n        // Import de arquivo inexistente (só para caminhos relativos)\r\n        if (val.startsWith('.')) {\r\n          const importPath = path.join(path.dirname(relPath), val);\r\n          if (\r\n            arquivosExistentes &&\r\n            !(\r\n              arquivosExistentes.has(importPath) ||\r\n              arquivosExistentes.has(importPath + '.ts') ||\r\n              arquivosExistentes.has(importPath + '.js')\r\n            )\r\n          ) {\r\n            ocorrencias.push({\r\n              tipo: 'erro',\r\n              mensagem: `Importação de arquivo inexistente: '${val}'`,\r\n              arquivo: relPath,\r\n              linha: p.node.loc?.start.line,\r\n              coluna: p.node.loc?.start.column,\r\n            });\r\n          }\r\n        }\r\n      },\r\n      CallExpression(p: NodePath<t.CallExpression>) {\r\n        const { callee, arguments: args } = p.node;\r\n        if (\r\n          callee.type === 'Identifier' &&\r\n          callee.name === 'require' &&\r\n          args[0]?.type === 'StringLiteral'\r\n        ) {\r\n          tiposImport.add('require');\r\n          const val = args[0].value;\r\n          // Alimenta grafo\r\n          if (!depsSet) {\r\n            depsSet = new Set<string>();\r\n            grafoDependencias.set(relPath, depsSet);\r\n          }\r\n          depsSet.add(normalizarModulo(val, relPath));\r\n          // Require externo\r\n          if (!val.startsWith('.') && !val.startsWith('/')) {\r\n            ocorrencias.push({\r\n              tipo: 'info',\r\n              mensagem: `Require de dependência externa: '${val}'`,\r\n              arquivo: relPath,\r\n              linha: p.node.loc?.start.line,\r\n              coluna: p.node.loc?.start.column,\r\n            });\r\n          }\r\n          // Require relativo longo\r\n          if (val.startsWith('.') && val.split('../').length > 3) {\r\n            ocorrencias.push({\r\n              tipo: 'aviso',\r\n              mensagem: `Require relativo sobe muitos diretórios: '${val}'`,\r\n              arquivo: relPath,\r\n              linha: p.node.loc?.start.line,\r\n              coluna: p.node.loc?.start.column,\r\n            });\r\n          }\r\n          // Require de .js em projeto TS\r\n          if (relPath.endsWith('.ts') && val.endsWith('.js')) {\r\n            ocorrencias.push({\r\n              tipo: 'alerta',\r\n              mensagem: `Require de arquivo .js em TypeScript: '${val}'`,\r\n              arquivo: relPath,\r\n              linha: p.node.loc?.start.line,\r\n              coluna: p.node.loc?.start.column,\r\n            });\r\n          }\r\n          // Require de arquivo inexistente (só para caminhos relativos)\r\n          if (val.startsWith('.')) {\r\n            const importPath = path.join(path.dirname(relPath), val);\r\n            if (\r\n              arquivosExistentes &&\r\n              !(\r\n                arquivosExistentes.has(importPath) ||\r\n                arquivosExistentes.has(importPath + '.ts') ||\r\n                arquivosExistentes.has(importPath + '.js')\r\n              )\r\n            ) {\r\n              ocorrencias.push({\r\n                tipo: 'erro',\r\n                mensagem: `Require de arquivo inexistente: '${val}'`,\r\n                arquivo: relPath,\r\n                linha: p.node.loc?.start.line,\r\n                coluna: p.node.loc?.start.column,\r\n              });\r\n            }\r\n          }\r\n        }\r\n      },\r\n    });\r\n\r\n    // Mistura de require/import\r\n    if (tiposImport.size > 1) {\r\n      ocorrencias.push({\r\n        tipo: 'aviso',\r\n        mensagem: `Uso misto de require e import no mesmo arquivo. Padronize para um só estilo.`,\r\n        arquivo: relPath,\r\n      });\r\n    }\r\n\r\n    // Detecta import circular simples (arquivo importa a si mesmo)\r\n    if (grafoDependencias.get(relPath)?.has(relPath)) {\r\n      ocorrencias.push({\r\n        tipo: 'alerta',\r\n        mensagem: `Importação circular detectada: o arquivo importa a si mesmo.`,\r\n        arquivo: relPath,\r\n      });\r\n    }\r\n\r\n    return Array.isArray(ocorrencias) ? ocorrencias : [];\r\n  },\r\n};\r\n"]}