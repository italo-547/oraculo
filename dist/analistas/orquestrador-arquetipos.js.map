{"version":3,"file":"orquestrador-arquetipos.js","sourceRoot":"","sources":["../../src/analistas/orquestrador-arquetipos.ts"],"names":[],"mappings":"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","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport type { ResultadoDeteccaoArquetipo } from '../tipos/tipos.js';\r\nimport { detectarArquetipoNode } from './detectores/detector-node.js';\r\nimport { detectarArquetipoJava } from './detectores/detector-java.js';\r\nimport { detectarArquetipoKotlin } from './detectores/detector-kotlin.js';\r\nimport { detectarArquetipoXML } from './detectores/detector-xml.js';\r\nimport { pontuarTodos } from './deteccao/pontuador.js';\r\nimport { ARQUETIPOS } from './arquetipos-defs.js';\r\n\r\n/**\r\n * Orquestrador central de detecção de arquétipos\r\n * Agrega votos dos detectores especializados e decide o arquétipo final\r\n */\r\nexport function detectarArquetipo(arquivos: string[]): ResultadoDeteccaoArquetipo {\r\n  // Agregação dos detectores por stack\r\n  const candidatos: ResultadoDeteccaoArquetipo[] = [\r\n    ...detectarArquetipoNode(arquivos),\r\n    ...detectarArquetipoJava(arquivos),\r\n    ...detectarArquetipoKotlin(arquivos),\r\n    ...detectarArquetipoXML(arquivos),\r\n  ];\r\n\r\n  let lista = candidatos;\r\n  if (!lista.length) {\r\n    // Fallback de compatibilidade: usar o pontuador completo para preservar comportamento legado\r\n    lista = pontuarTodos(arquivos);\r\n  }\r\n\r\n  // Se ainda vazio, é desconhecido\r\n  if (!lista.length) {\r\n    return {\r\n      nome: 'desconhecido',\r\n      score: 0,\r\n      confidence: 0,\r\n      matchedRequired: [],\r\n      missingRequired: [],\r\n      matchedOptional: [],\r\n      dependencyMatches: [],\r\n      filePatternMatches: [],\r\n      forbiddenPresent: [],\r\n      anomalias: [],\r\n      sugestaoPadronizacao: '',\r\n      explicacaoSimilaridade: '',\r\n      descricao: 'Arquétipo não identificado',\r\n    };\r\n  }\r\n\r\n  // Regra especial (compatibilidade com testes de penalidades):\r\n  // Se existir candidato cujo único \"sinal\" são diretórios proibidos presentes\r\n  // (sem matches de required/optional/dependency/pattern), priorizamos aquele\r\n  // com maior quantidade de diretórios proibidos detectados.\r\n  const apenasPenalidades = lista.filter((c) => {\r\n    const pos =\r\n      (c.matchedRequired?.length || 0) +\r\n      (c.matchedOptional?.length || 0) +\r\n      (c.dependencyMatches?.length || 0) +\r\n      (c.filePatternMatches?.length || 0);\r\n    const forb = c.forbiddenPresent?.length || 0;\r\n    return forb > 0 && pos === 0;\r\n  });\r\n  if (apenasPenalidades.length > 0) {\r\n    // Heurística de segurança: ignore o candidato 'monorepo-packages' quando o único forbidden presente for 'src'\r\n    // (cenário comum em projetos Node simples com pasta src/, que não devem ser classificados como monorepo).\r\n    const filtrados = apenasPenalidades.filter((c) => {\r\n      // Regra específica: se o candidato for 'monorepo-packages' e o único forbidden detectado for 'src', descartamos\r\n      if (c.nome === 'monorepo-packages') {\r\n        const forb = c.forbiddenPresent || [];\r\n        if (forb.length === 1 && forb[0] === 'src') return false;\r\n      }\r\n      return true;\r\n    });\r\n    if (filtrados.length === 0) {\r\n      // caso todos tenham sido filtrados, prossegue com fluxo normal\r\n    } else {\r\n      // desempate refinado: maior cobertura relativa de forbidden (detectados/definidos)\r\n      filtrados.sort((a, b) => {\r\n        const forbA = a.forbiddenPresent?.length || 0;\r\n        const forbB = b.forbiddenPresent?.length || 0;\r\n        // Usa somente o total de diretórios proibidos definidos no alvo para o ratio\r\n        const defA = ARQUETIPOS.find((d) => d.nome === a.nome);\r\n        const defB = ARQUETIPOS.find((d) => d.nome === b.nome);\r\n        const totA = defA?.forbiddenDirs?.length || 0;\r\n        const totB = defB?.forbiddenDirs?.length || 0;\r\n        const ratioA = totA > 0 ? forbA / totA : 0;\r\n        const ratioB = totB > 0 ? forbB / totB : 0;\r\n        if (ratioB !== ratioA) return ratioB - ratioA;\r\n        if (forbB !== forbA) return forbB - forbA;\r\n        // depois, mais missingRequired primeiro (penalidade maior do alvo)\r\n        const miss = (b.missingRequired?.length || 0) - (a.missingRequired?.length || 0);\r\n        if (miss !== 0) return miss;\r\n        return a.nome.localeCompare(b.nome);\r\n      });\r\n      return filtrados[0];\r\n    }\r\n  }\r\n\r\n  // Ordenação próxima do legado: menor missingRequired, maior score, maior matchedRequired, maior confidence, nome asc\r\n  lista.sort((a, b) => {\r\n    const mm = (a.missingRequired?.length || 0) - (b.missingRequired?.length || 0);\r\n    if (mm !== 0) return mm;\r\n    if (b.score !== a.score) return b.score - a.score;\r\n    const mr = (b.matchedRequired?.length || 0) - (a.matchedRequired?.length || 0);\r\n    if (mr !== 0) return mr;\r\n    if (b.confidence !== a.confidence) return b.confidence - a.confidence;\r\n    return a.nome.localeCompare(b.nome);\r\n  });\r\n\r\n  const best = lista[0];\r\n  const hasSignals =\r\n    (best.matchedRequired?.length || 0) > 0 ||\r\n    (best.matchedOptional?.length || 0) > 0 ||\r\n    (best.dependencyMatches?.length || 0) > 0 ||\r\n    (best.filePatternMatches?.length || 0) > 0 ||\r\n    (best.forbiddenPresent?.length || 0) > 0;\r\n  if (!hasSignals) {\r\n    return {\r\n      nome: 'desconhecido',\r\n      score: 0,\r\n      confidence: 0,\r\n      matchedRequired: [],\r\n      missingRequired: [],\r\n      matchedOptional: [],\r\n      dependencyMatches: [],\r\n      filePatternMatches: [],\r\n      forbiddenPresent: [],\r\n      anomalias: [],\r\n      sugestaoPadronizacao: '',\r\n      explicacaoSimilaridade: '',\r\n      descricao: 'Arquétipo não identificado',\r\n    };\r\n  }\r\n  return best;\r\n}\r\n"]}