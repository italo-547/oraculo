// SPDX-License-Identifier: MIT
/**
 * Sistema de Arqu√©tipos Personalizados do Or√°culo
 *
 * Permite que usu√°rios criem arqu√©tipos personalizados para seus projetos,
 * mantendo compatibilidade com arqu√©tipos oficiais e oferecendo sugest√µes
 * de melhores pr√°ticas baseadas na personaliza√ß√£o do usu√°rio.
 */
import { promises as fs } from 'node:fs';
import path from 'node:path';
import { ARQUETIPOS } from '@analistas/arquetipos-defs.js';
import { log } from '@nucleo/constelacao/log.js';
import { lerEstado, salvarEstado } from '@zeladores/util/persistencia.js';
const ARQUETIPO_PERSONALIZADO_FILENAME = 'oraculo.repo.arquetipo.json';
/**
 * Carrega o arqu√©tipo personalizado do projeto atual
 */
export async function carregarArquetipoPersonalizado(baseDir = process.cwd()) {
    const arquivoArquetipo = path.join(baseDir, ARQUETIPO_PERSONALIZADO_FILENAME);
    try {
        const arquetipo = await lerEstado(arquivoArquetipo, null);
        // Valida√ß√£o b√°sica
        if (!arquetipo || !arquetipo.nome || !arquetipo.arquetipoOficial) {
            log.aviso(`‚ö†Ô∏è Arqu√©tipo personalizado inv√°lido em ${arquivoArquetipo}: nome ou arquetipoOficial ausente`);
            return null;
        }
        return arquetipo;
    }
    catch {
        // Arquivo n√£o existe ou √© inv√°lido - isso √© normal
        return null;
    }
}
/**
 * Salva um arqu√©tipo personalizado
 */
export async function salvarArquetipoPersonalizado(arquetipo, baseDir = process.cwd()) {
    const arquetipoCompleto = {
        ...arquetipo,
        metadata: {
            criadoEm: new Date().toISOString(),
            versao: '1.0.0',
            notasUsuario: undefined,
        },
    };
    const arquivoArquetipo = path.join(baseDir, ARQUETIPO_PERSONALIZADO_FILENAME);
    await salvarEstado(arquivoArquetipo, arquetipoCompleto);
    log.sucesso(`‚úÖ Arqu√©tipo personalizado salvo em ${arquivoArquetipo}`);
}
/**
 * Verifica se existe um arqu√©tipo personalizado
 */
export async function existeArquetipoPersonalizado(baseDir = process.cwd()) {
    const arquivoArquetipo = path.join(baseDir, ARQUETIPO_PERSONALIZADO_FILENAME);
    try {
        await fs.access(arquivoArquetipo);
        return true;
    }
    catch {
        return false;
    }
}
/**
 * Obt√©m o arqu√©tipo oficial base para um arqu√©tipo personalizado
 */
export function obterArquetipoOficial(arquetipoPersonalizado) {
    return ARQUETIPOS.find((arq) => arq.nome === arquetipoPersonalizado.arquetipoOficial) || null;
}
/**
 * Gera sugest√µes de cria√ß√£o de arqu√©tipo personalizado quando projeto √© desconhecido
 */
export function gerarSugestaoArquetipoPersonalizado(projetoDesconhecido) {
    const sugestao = `
üåü Projeto personalizado detectado: "${projetoDesconhecido.nome}"

O Or√°culo identificou uma estrutura de projeto que n√£o corresponde a arqu√©tipos oficiais,
mas voc√™ pode criar um arqu√©tipo personalizado para receber sugest√µes otimizadas!

üìÅ Estrutura detectada:
${projetoDesconhecido.estruturaDetectada.map((dir) => `  ‚Ä¢ ${dir}`).join('\n')}

üìÑ Arquivos na raiz:
${projetoDesconhecido.arquivosRaiz
        .slice(0, 5)
        .map((file) => `  ‚Ä¢ ${file}`)
        .join('\n')}
${projetoDesconhecido.arquivosRaiz.length > 5 ? `  ‚Ä¢ ... e mais ${projetoDesconhecido.arquivosRaiz.length - 5} arquivos` : ''}

üí° Para criar seu arqu√©tipo personalizado, execute:
   oraculo diagnosticar --criar-arquetipo

Isso criar√° um arquivo 'oraculo.repo.arquetipo.json' com base na estrutura atual,
que o Or√°culo usar√° para oferecer sugest√µes personalizadas mantendo as melhores pr√°ticas.
`;
    return sugestao;
}
/**
 * Cria um template de arqu√©tipo personalizado baseado na estrutura atual do projeto
 */
export function criarTemplateArquetipoPersonalizado(nomeProjeto, estruturaDetectada, arquivosRaiz, arquetipoSugerido = 'generico') {
    // Tenta inferir o tipo de projeto baseado na estrutura
    let arquetipoOficial = arquetipoSugerido;
    if (estruturaDetectada.some((dir) => dir.includes('commands') || dir.includes('events'))) {
        arquetipoOficial = 'bot';
    }
    else if (estruturaDetectada.some((dir) => dir.includes('controllers') || dir.includes('routes'))) {
        arquetipoOficial = 'api-rest-express';
    }
    else if (estruturaDetectada.some((dir) => dir.includes('pages') && dir.includes('api'))) {
        arquetipoOficial = 'fullstack';
    }
    else if (estruturaDetectada.some((dir) => dir.includes('cli'))) {
        arquetipoOficial = 'cli-modular';
    }
    // Identifica diret√≥rios principais (n√£o muito profundos)
    const diretoriosPrincipais = estruturaDetectada
        .filter((dir) => !dir.includes('/') || dir.split('/').length <= 2)
        .filter((dir) => !dir.startsWith('node_modules') && !dir.startsWith('.git'));
    // Identifica arquivos-chave na raiz
    const arquivosChave = arquivosRaiz
        .filter((file) => ['package.json', 'tsconfig.json', 'README.md', '.env.example'].includes(file) ||
        file.endsWith('.ts') ||
        file.endsWith('.js'))
        .slice(0, 5);
    return {
        nome: nomeProjeto,
        descricao: `Projeto personalizado: ${nomeProjeto}`,
        arquetipoOficial,
        estruturaPersonalizada: {
            diretorios: diretoriosPrincipais,
            arquivosChave,
            padroesNomenclatura: {
                // Padr√µes comuns baseados na estrutura detectada
                ...(estruturaDetectada.some((d) => d.includes('components')) && {
                    components: '*-component.*',
                }),
                ...(estruturaDetectada.some((d) => d.includes('utils')) && { utils: '*-util.*' }),
                ...(estruturaDetectada.some((d) => d.includes('test')) && { tests: '*.test.*' }),
            },
        },
        melhoresPraticas: {
            recomendado: ['src/', 'tests/', 'docs/', 'README.md', '.env.example'],
            evitar: ['temp/', 'cache/', '*.log'],
            notas: [
                'Mantenha c√≥digo fonte organizado em src/',
                'Separe testes em pasta dedicada',
                'Documente APIs e funcionalidades importantes',
            ],
        },
    };
}
/**
 * Valida um arqu√©tipo personalizado
 */
export function validarArquetipoPersonalizado(arquetipo) {
    const erros = [];
    if (!arquetipo.nome || typeof arquetipo.nome !== 'string') {
        erros.push('Nome do projeto √© obrigat√≥rio');
    }
    if (!arquetipo.arquetipoOficial || typeof arquetipo.arquetipoOficial !== 'string') {
        erros.push('Arqu√©tipo oficial base √© obrigat√≥rio');
    }
    else {
        // Verifica se o arqu√©tipo oficial existe
        const arquetipoOficial = ARQUETIPOS.find((arq) => arq.nome === arquetipo.arquetipoOficial);
        if (!arquetipoOficial) {
            erros.push(`Arqu√©tipo oficial '${arquetipo.arquetipoOficial}' n√£o encontrado. Use: ${ARQUETIPOS.map((a) => a.nome).join(', ')}`);
        }
    }
    if (!arquetipo.estruturaPersonalizada) {
        erros.push('Estrutura personalizada √© obrigat√≥ria');
    }
    else {
        if (!Array.isArray(arquetipo.estruturaPersonalizada.diretorios)) {
            erros.push('Diret√≥rios devem ser um array');
        }
        if (!Array.isArray(arquetipo.estruturaPersonalizada.arquivosChave)) {
            erros.push('Arquivos-chave devem ser um array');
        }
    }
    return {
        valido: erros.length === 0,
        erros,
    };
}
/**
 * Lista todos os arqu√©tipos oficiais dispon√≠veis
 */
export function listarArquetiposOficiais() {
    return ARQUETIPOS;
}
/**
 * Integra arqu√©tipo personalizado com oficial para sugest√µes
 */
export function integrarArquetipos(personalizado, oficial) {
    return {
        ...oficial,
        nome: personalizado.nome,
        descricao: personalizado.descricao || oficial.descricao,
        requiredDirs: personalizado.estruturaPersonalizada.diretorios,
        optionalDirs: oficial.optionalDirs,
        rootFilesAllowed: personalizado.estruturaPersonalizada.arquivosChave,
        // Mant√©m outras propriedades do oficial como base
        forbiddenDirs: oficial.forbiddenDirs,
        dependencyHints: oficial.dependencyHints,
        filePresencePatterns: oficial.filePresencePatterns,
        pesoBase: oficial.pesoBase,
    };
}
//# sourceMappingURL=arquetipos-personalizados.js.map