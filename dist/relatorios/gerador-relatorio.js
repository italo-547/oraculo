import fs from 'node:fs/promises';
/**
 * Gera um relat√≥rio Markdown a partir do resultado da execu√ß√£o.
 */
export async function gerarRelatorioMarkdown(resultado, outputPath) {
    const { totalArquivos, ocorrencias, guardian, timestamp, duracaoMs } = resultado;
    const dataISO = new Date(timestamp).toISOString();
    // Ordena ocorr√™ncias por arquivo e linha
    const ocorrenciasOrdenadas = [...ocorrencias].sort((a, b) => a.relPath.localeCompare(b.relPath) || a.linha - b.linha);
    // Cabe√ßalho do relat√≥rio
    const header = `# üìú Relat√≥rio Or√°culo  
**Data:** ${dataISO}  
**Dura√ß√£o:** ${duracaoMs.toFixed(1)}ms  
**Arquivos escaneados:** ${totalArquivos}  
**Ocorr√™ncias encontradas:** ${ocorrencias.length}  

---

## üõ°Ô∏è Verifica√ß√£o de Integridade (Guardian)

- **Status:** ${guardian ? guardian.status : 'n√£o executada'}  
- **Timestamp:** ${guardian ? guardian.timestamp : '‚Äî'}  
- **Total de arquivos protegidos:** ${guardian?.totalArquivos ?? '‚Äî'}  

---

## üö® Ocorr√™ncias Detalhadas

| Arquivo | Linha | N√≠vel  | Mensagem |
| ------- | ----- | ------ | -------- |
${ocorrenciasOrdenadas
        .map((o) => `| ${o.relPath} | ${o.linha} | ${o.nivel} | ${o.mensagem.replace(/\|/g, '\\|')} |`)
        .join('\n')}
`;
    // Escreve no disco
    await fs.writeFile(outputPath, header, 'utf-8');
}
/**
 * Gera um relat√≥rio JSON a partir do resultado da execu√ß√£o.
 */
export async function gerarRelatorioJson(resultado, outputPath) {
    const json = JSON.stringify(resultado, null, 2);
    await fs.writeFile(outputPath, json, 'utf-8');
}
