{"version":3,"file":"comando-diagnosticar.js","sourceRoot":"","sources":["../../src/cli/comando-diagnosticar.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAChE,OAAO,EAAE,oBAAoB,EAAE,MAAM,gCAAgC,CAAC;AAEtE,MAAM,UAAU,mBAAmB,CAAC,mBAA4D;IAC9F,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,cAAc,CAAC;SACpC,KAAK,CAAC,MAAM,CAAC;SACb,WAAW,CAAC,6CAA6C,CAAC,CAAC;IAE9D,0FAA0F;IAC1F,mEAAmE;IACnE,GAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC7B,+EAA+E;IAC/E,uFAAuF;IACvF,6DAA6D;IAC7D,GAAG,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAE/B,gCAAgC;IAChC,KAAK,MAAM,GAAG,IAAI,mBAAmB,EAAE,CAAC;QACtC,IAAI,GAAG,CAAC,MAAM,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC;QAChE,CAAC;aAAM,IAAI,cAAc,IAAI,GAAG,EAAE,CAAC;YACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC;QACpD,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAED,GAAG,CAAC,MAAM,CACR,KAAK,EACH,IAWC,EACD,OAAgB,EAChB,EAAE;QACF,wBAAwB;QACxB,mBAAmB,CACjB,OAAO,CAAC,MAAM,IAAI,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CACzF,CAAC;QAEF,0DAA0D;QAC9D,MAAM,oBAAoB,CAAC,IAAW,CAAC,CAAC;IACtC,CAAC,CACF,CAAC;IACF,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport { Command } from 'commander';\r\nimport { optionsDiagnosticar } from './options-diagnosticar.js';\r\nimport { processarDiagnostico } from './processamento-diagnostico.js';\r\n\r\nexport function comandoDiagnosticar(aplicarFlagsGlobais: (opts: Record<string, unknown>) => void) {\r\n  const cmd = new Command('diagnosticar')\r\n    .alias('diag')\r\n    .description('Executa uma análise completa do repositório');\r\n\r\n  // Em modo padrão, ignoramos opções desconhecidas para evitar saídas forçadas do Commander\r\n  // (comportamento desejado também pelos testes de opções inválidas)\r\n  cmd.allowUnknownOption(true);\r\n  // Também aceitamos argumentos excedentes silenciosamente, pois diversos testes\r\n  // passam o nome do comando na linha simulada (ex.: ['node','cli','diagnosticar', ...])\r\n  // e o Commander trataria como \"excess arguments\" por padrão.\r\n  cmd.allowExcessArguments(true);\r\n\r\n  // Adiciona opções centralizadas\r\n  for (const opt of optionsDiagnosticar) {\r\n    if (opt.parser) {\r\n      cmd.option(opt.flags, opt.desc, opt.parser, opt.defaultValue);\r\n    } else if ('defaultValue' in opt) {\r\n      cmd.option(opt.flags, opt.desc, opt.defaultValue);\r\n    } else {\r\n      cmd.option(opt.flags, opt.desc);\r\n    }\r\n  }\r\n\r\n  cmd.action(\r\n    async (\r\n      opts: {\r\n        guardianCheck?: boolean;\r\n        verbose?: boolean;\r\n        compact?: boolean;\r\n        json?: boolean;\r\n        include?: string[];\r\n        exclude?: string[];\r\n        listarAnalistas?: boolean;\r\n        detalhado?: boolean;\r\n        criarArquetipo?: boolean;\r\n        salvarArquetipo?: boolean;\r\n      },\r\n      command: Command,\r\n    ) => {\r\n      // Aplicar flags globais\r\n      aplicarFlagsGlobais(\r\n        command.parent && typeof command.parent.opts === 'function' ? command.parent.opts() : {},\r\n      );\r\n\r\n      // Delegar todo o processamento para a função modularizada\r\n  await processarDiagnostico(opts as any);\r\n    },\r\n  );\r\n  return cmd;\r\n}\r\n"]}