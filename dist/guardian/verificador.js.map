{"version":3,"file":"verificador.js","sourceRoot":"","sources":["../../src/guardian/verificador.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,OAAO,EAAE,uBAAuB,EAAE,MAAM,WAAW,CAAC;AASpD;;;;;;GAMG;AACH,MAAM,UAAU,kBAAkB,CAChC,WAAwB,EACxB,eAAsC;IAEtC,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9E,MAAM,WAAW,GAAa,EAAE,CAAC;IAEjC,KAAK,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,WAAW,EAAE,CAAC;QAC/C,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YAAE,SAAS;QACzE,MAAM,SAAS,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAiB;QACrE,MAAM,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC/C,IAAI,YAAY,IAAI,SAAS,KAAK,YAAY,EAAE,CAAC;YAC/C,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,OAAO;QACL,WAAW;QACX,WAAW,EAAE,eAAe,CAAC,MAAM;KACpC,CAAC;AACJ,CAAC","sourcesContent":["// SPDX-License-Identifier: MIT\r\nimport { gerarSnapshotDoConteudo } from './hash.js';\r\nimport { FileEntry } from '@tipos/tipos.js';\r\nimport { RegistroIntegridade } from './registros.js';\r\n\r\nexport interface ResultadoVerificacao {\r\n  corrompidos: string[];\r\n  verificados: number;\r\n}\r\n\r\n/**\r\n * Compara os arquivos atuais com os registros de integridade salvos e detecta divergências.\r\n *\r\n * @param fileEntries Arquivos atuais lidos do sistema\r\n * @param registrosSalvos Registros prévios salvos (hashes de referência)\r\n * @returns Resultado contendo lista de arquivos corrompidos e total verificado\r\n */\r\nexport function verificarRegistros(\r\n  fileEntries: FileEntry[],\r\n  registrosSalvos: RegistroIntegridade[],\r\n): ResultadoVerificacao {\r\n  const registrosMap = new Map(registrosSalvos.map((r) => [r.arquivo, r.hash]));\r\n  const corrompidos: string[] = [];\r\n\r\n  for (const { relPath, content } of fileEntries) {\r\n    if (!relPath || typeof content !== 'string' || !content.trim()) continue;\r\n    const hashAtual = gerarSnapshotDoConteudo(content); // retorna string\r\n    const hashEsperado = registrosMap.get(relPath);\r\n    if (hashEsperado && hashAtual !== hashEsperado) {\r\n      corrompidos.push(relPath);\r\n    }\r\n  }\r\n\r\n  return {\r\n    corrompidos,\r\n    verificados: registrosSalvos.length,\r\n  };\r\n}\r\n"]}